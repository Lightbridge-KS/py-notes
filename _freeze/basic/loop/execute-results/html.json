{
  "hash": "6afe279dbee4cc099e2e9a063a2dc06a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Loop\"\n---\n\n\n\n\n\n\n\n\n## For Loop\n\nCommon iterables that can be used in loop:\n\n-   `range`\n-   `str`: iterate through each characters\n-   `list`\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfor i in \"python\":\n  print(i)\n#> p\n#> y\n#> t\n#> h\n#> o\n#> n\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfor i in [1, 2]:\n  print(i)\n#> 1\n#> 2\n```\n:::\n\n\n\n\n`range()` is very helpful\n\n``` python\nrange(start, stop, step)\n```\n\n-   `start` is inclusion\n-   `stop` is exclusive\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntype(range(1))\n#> <class 'range'>\n\nlist(range(2))\n#> [0, 1]\nlist(range(1, 3))\n#> [1, 2]\nlist(range(1, 10, 2))\n#> [1, 3, 5, 7, 9]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfor number in range(3):\n  print(number)\n#> 0\n#> 1\n#> 2\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nfor number in range(1, 4):\n  print(\"Attempt: \", number, number * \".\")\n#> Attempt:  1 .\n#> Attempt:  2 ..\n#> Attempt:  3 ...\n```\n:::\n\n\n\n\n### For else\n\nThe `break` statement, breaks out of the innermost enclosing `for` or `while` loop\n\n`else` is executed when the loop terminates through exhaustion of the iterable, but not when the loop is terminated by a break statement.\n\nFrom: [Ref](https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsuccessful = False\n\nfor number in range(1, 4):\n  print(\"Attempt: \", number)\n  if successful:\n      print(\"Success\")\n      break\nelse:\n  print(\"Attempt 3 times and failed\")\n#> Attempt:  1\n#> Attempt:  2\n#> Attempt:  3\n#> Attempt 3 times and failed\n```\n:::\n\n\n\n\n### Nested Loop\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfor x in range(3):\n  for y in range(2):\n    print(f\"({x},{y})\")\n#> (0,0)\n#> (0,1)\n#> (1,0)\n#> (1,1)\n#> (2,0)\n#> (2,1)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ncount = 0\n\nfor n in range(1, 10):\n  if (n % 2) == 0:\n    print(n)\n    count += 1\n#> 2\n#> 4\n#> 6\n#> 8\n    \nprint(f\"We have {count} even numbers\")\n#> We have 4 even numbers\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n10 % 2\n#> 0\n10 % 3\n#> 1\n```\n:::\n\n\n\n\n### Enumerate\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nflavor_list = [\"vanilla\", \"chocolate\", \"pecan\", \"strawberry\"]\n```\n:::\n\n\n\n\n**Using `range(len())`**\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfor i in range(len(flavor_list)):\n    flavor = flavor_list[i]\n    print(f\"{i + 1}: {flavor}\")\n#> 1: vanilla\n#> 2: chocolate\n#> 3: pecan\n#> 4: strawberry\n```\n:::\n\n\n\n\n**Using `enumerate()`** (better)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfor i, flavor in enumerate(flavor_list):\n    print(f\"{i + 1}: {flavor}\")\n#> 1: vanilla\n#> 2: chocolate\n#> 3: pecan\n#> 4: strawberry\n```\n:::\n\n\n\n\n- Prefer enumerate instead of looping over a range and indexing into a sequence.  \n- You can supply a second, optional parameter to enumerate that specifies the beginning number for counting (zero is the default).\n\n\n## While Loop\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnumber = 100\nwhile number > 0:\n  number //= 2\n  print(number)\n#> 50\n#> 25\n#> 12\n#> 6\n#> 3\n#> 1\n#> 0\n```\n:::\n",
    "supporting": [
      "loop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
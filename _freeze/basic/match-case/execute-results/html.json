{
  "hash": "cd0d59d144361017e21da8b7d917313b",
  "result": {
    "engine": "jupyter",
    "markdown": "# `match-case`\n\nImplemented in Python 3.10\n\n- [Motivation and rationale](https://peps.python.org/pep-0635/#match-semantics)\n\n## Basic\n\n### Simple\n\n::: {#6336bb24 .cell execution_count=1}\n``` {.python .cell-code}\ndef http_error(status):\n    match status:\n        case 400:\n            return \"Bad request\"\n        case 404:\n            return \"Not found\"\n        case 418:\n            return \"I'm a teapot\"\n        case _:\n            return \"Something's wrong with the internet\"\n```\n:::\n\n\n::: {#54d80f36 .cell execution_count=2}\n``` {.python .cell-code}\nhttp_error(400)\nhttp_error(418)\nhttp_error(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n\"Something's wrong with the internet\"\n```\n:::\n:::\n\n\n### Combined\n\n::: {#8657fff8 .cell execution_count=3}\n``` {.python .cell-code}\ndef http_error2(status):\n    match status:\n        case 400:\n            return \"Bad request\"\n        case 401 | 403 | 404: #  combine \n            return \"Not allowed\"\n        case _:\n            return \"Something's wrong with the internet\"\n```\n:::\n\n\n::: {#360bacd2 .cell execution_count=4}\n``` {.python .cell-code}\nhttp_error2(401)\nhttp_error2(403)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'Not allowed'\n```\n:::\n:::\n\n\n::: {#43c60867 .cell execution_count=5}\n``` {.python .cell-code}\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef where_is(point):\n    match point:\n        case Point(x=0, y=0):\n            print(\"Origin\")\n        case Point(x=0, y=y):\n            print(f\"Y={y}\")\n        case Point(x=x, y=0):\n            print(f\"X={x}\")\n        case Point():\n            print(\"Somewhere else\")\n        case _:\n            print(\"Not a point\")\n```\n:::\n\n\n::: {#9e0dcd3a .cell execution_count=6}\n``` {.python .cell-code}\np0 = Point(0, 0)\nwhere_is(p0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOrigin\n```\n:::\n:::\n\n\n::: {#998bed3e .cell execution_count=7}\n``` {.python .cell-code}\np1 = Point(1, 1)\nwhere_is(p1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSomewhere else\n```\n:::\n:::\n\n\n### Match By length\n\n::: {#1996cea0 .cell execution_count=8}\n``` {.python .cell-code}\ntoday_responses = [200, 300, 404, 500]\nmatch today_responses:\n    case [a]:\n            print(f\"One response today: {a}\")\n    case [a, b]:\n            print(f\"Two responses today: {a} and {b}\")\n    case [a, b, *rest]:\n            print(f\"All responses: {a}, {b}, {rest}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAll responses: 200, 300, [404, 500]\n```\n:::\n:::\n\n\n### Using `__match_args__`\n\n::: {#fbfc570f .cell execution_count=9}\n``` {.python .cell-code}\nclass Point:\n    __match_args__ = ('x', 'y')\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n# Suppose you have an instance of Point\npoint = Point(1, 2)\n```\n:::\n\n\nYou can use pattern matching to destructure the point:\n\n::: {#0bc2fb10 .cell execution_count=10}\n``` {.python .cell-code}\nmatch point:\n    case Point(x, y):\n        print(f\"The point is at ({x}, {y}).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe point is at (1, 2).\n```\n:::\n:::\n\n\nIs equivalent to:\n\n::: {#1eeb93ab .cell execution_count=11}\n``` {.python .cell-code}\nif isinstance(point, Point):\n  print(f\"The point is at ({point.x}, {point.y}).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe point is at (1, 2).\n```\n:::\n:::\n\n\nIn this example, the match statement checks if point is an instance of Point and then automatically unpacks its x and y attributes according to the order specified in `__match_args__`.\n\n",
    "supporting": [
      "match-case_files"
    ],
    "filters": [],
    "includes": {}
  }
}
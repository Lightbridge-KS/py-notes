{
  "hash": "56a542ca7ba474e6ab037559adf0a863",
  "result": {
    "markdown": "---\ntitle: \"String\"\nformat: html\n---\n\n\n\n\n`Python`\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncourse = \"Python programming\"\n\ntype(course)\n#> <class 'str'>\nlen(course)\n#> 18\n```\n:::\n\n\n`R`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncourse_r <- \"R programming\"\n\ntypeof(course_r)\n#> [1] \"character\"\nlength(course_r)\n#> [1] 1\nnchar(course_r)\n#> [1] 13\n```\n:::\n\n\n### Slicing\n\n`Python`\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncourse[0]\n#> 'P'\ncourse[-1]\n#> 'g'\ncourse[0:3]\n#> 'Pyt'\ncourse[:3]\n#> 'Pyt'\ncourse[0:]\n#> 'Python programming'\ncourse[:]\n#> 'Python programming'\n```\n:::\n\n\n`R`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsubstr(course_r, 1, 1)\n#> [1] \"R\"\nsubstr(course_r, 1, 4)\n#> [1] \"R pr\"\n```\n:::\n\n\n\n\n\n### Escape\n\n`Python`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(\"python \\\"programming\\\" \\nis 'fun'\")\n#> python \"programming\" \n#> is 'fun'\n```\n:::\n\n\n`R`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat(\"R\\nis \\\"also\\\" 'fun'\")\n#> R\n#> is \"also\" 'fun'\n```\n:::\n\n\n\n### Join String\n\n`Python`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfirst = \"Kittipos\"\nlast = \"Sirivongrungson\"\n# Simple\nfirst + \" \" + last\n# Advance\n#> 'Kittipos Sirivongrungson'\nprint(f\"{first} {last} is {len(first + last)} letter long\")\n#> Kittipos Sirivongrungson is 23 letter long\n```\n:::\n\n\n`R`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfirst <-  \"Kittipos\"\nlast <-  \"Sirivongrungson\"\n# Simple\npaste(first, last)\n#> [1] \"Kittipos Sirivongrungson\"\n# Advance\nglue::glue(\"{first} {last} is {nchar(paste0(first, last))} letter long\")\n#> Kittipos Sirivongrungson is 23 letter long\n```\n:::\n\n\n\n\n\n\n### String Methods\n\n`Python`\n\nCopy on modify \n\n\n::: {.cell}\n\n```{.python .cell-code}\ncourse = \" Python programming \"\n\ncourse.upper() # Copy on modify\n#> ' PYTHON PROGRAMMING '\ncourse # Original is intact\n#> ' Python programming '\n```\n:::\n\n\nBasic formatting\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncourse.upper()\n#> ' PYTHON PROGRAMMING '\ncourse.lower()\n#> ' python programming '\ncourse.title()\n#> ' Python Programming '\n```\n:::\n\n\n\nStrip white spaces\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncourse.strip()\n#> 'Python programming'\ncourse.lstrip() # left\n#> 'Python programming '\ncourse.rstrip() # right\n#> ' Python programming'\n```\n:::\n\n\nFind and replace character\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncourse = \" Python programming \"\n\ncourse.find(\"pro\")\n#> 8\ncourse.replace(\"p\", \"j\")\n#> ' Python jrogramming '\n```\n:::\n\n\nLogical testing with string\n \n\n::: {.cell}\n\n```{.python .cell-code}\n\"pro\" in course\n#> True\n\"java\" not in course\n#> True\n```\n:::\n\n\n### Format String\n\n[Literal string interpolation](https://peps.python.org/pep-0498/)\n\nGroup 3 digits with `,`\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = 1000000\nf\"{x:,}\"\n#> '1,000,000'\n```\n:::\n\n\nround digits\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = 2/3\nf\"{x:.2f}\"\n#> '0.67'\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}
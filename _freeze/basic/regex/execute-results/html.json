{
  "hash": "867c5cadcb89f0308183aaf444294f4a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Regex\n---\n\n::: {#43351b75 .cell execution_count=1}\n``` {.python .cell-code}\nimport re\n```\n:::\n\n\n## Common Functions \n\n### `re.search()`\n\n- Searches for the first occurrence of a pattern within a string.\n- Returns a match object if the pattern is found; otherwise, returns `None`.\n\n::: {#fc9a2b27 .cell execution_count=2}\n``` {.python .cell-code}\nimport re\n\ntext = \"hello world\"\nmatch = re.search(r\"hello\", text)\nprint(match)\n\nif match:\n    print(\"Pattern found!\")\nelse:\n    print(\"Pattern not found.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<re.Match object; span=(0, 5), match='hello'>\nPattern found!\n```\n:::\n:::\n\n\n### `re.match()`\n\n- Checks if the pattern matches **at the beginning** of the string.\n- Returns a match object if it matches the start of the string, otherwise returns `None`.\n\n::: {#8377fd02 .cell execution_count=3}\n``` {.python .cell-code}\ntext = \"hello world\"\nmatch = re.match(r\"hello\", text)\n\nif match:\n    print(\"Pattern matches the start!\")\nelse:\n    print(\"No match at the start.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPattern matches the start!\n```\n:::\n:::\n\n\n### `re.findall()`\n\n::: {#7593b287 .cell execution_count=4}\n``` {.python .cell-code}\ntext = \"My phone number is 1234, and my zip code is 56789.\"\nmatches = re.findall(r\"\\d+\", text)\nmatches\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n['1234', '56789']\n```\n:::\n:::\n\n\n### `re.sub()`\n\n- Substitutes all occurrences of a pattern with a replacement string.\n- Returns a new string with the substitutions.\n\n::: {#3ab3cb51 .cell execution_count=5}\n``` {.python .cell-code}\ntext = \"I have a dog. My neighbor has a dog too.\"\nnew_text = re.sub(r\"dog\", \"cat\", text)\nnew_text\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'I have a cat. My neighbor has a cat too.'\n```\n:::\n:::\n\n\n## Regex Syntax\n\nRegular expressions use **special characters** to define patterns. Here are some of the most commonly used characters:\n\n### Metacharacters:\n\n- `.` : Matches any single character except newline (`\\n`).\n- `^` : Matches the start of a string.\n- `$` : Matches the end of a string.\n- `*` : Matches 0 or more repetitions of the preceding character.\n- `+` : Matches 1 or more repetitions of the preceding character.\n- `?` : Matches 0 or 1 occurrence of the preceding character.\n- `{}` : Specifies the number of repetitions (e.g., `{2}` means exactly two, `{2,4}` means between two and four).\n\n\n### Character Classes:\n\n- `\\d` : Matches any digit (equivalent to `[0-9]`).\n- `\\w` : Matches any alphanumeric character (equivalent to `[a-zA-Z0-9_]`).\n- `\\s` : Matches any whitespace character (spaces, tabs, newlines).\n- `\\D`, `\\W`, `\\S` : Match the opposite of `\\d`, `\\w`, and `\\s`.\n\n\n### Anchors:\n\n- `^` : Anchors the pattern to the start of the string.\n- `$` : Anchors the pattern to the end of the string.\n\nExample:\n```python\npattern = r\"^\\d+\"  # Matches digits at the start of the string\ntext = \"1234abc\"\nmatch = re.search(pattern, text)\nif match:\n    print(\"Found at the start:\", match.group())  # Output: Found at the start: 1234\n```\n\n### Groups:\n\n- Parentheses `()` are used to create groups in regex.\n- You can extract matched groups using `.group()` or `.groups()`.\n\nExample:\n\n::: {#8a1e38d1 .cell execution_count=6}\n``` {.python .cell-code}\npattern = r\"(hello) (world)\"\ntext = \"hello world\"\nmatch = re.search(pattern, text)\n\nif match:\n    print(match.group(1))  # Output: hello\n    print(match.group(2))  # Output: world\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello\nworld\n```\n:::\n:::\n\n\n### Escaping Special Characters\n\nIf you want to match one of the special regex characters literally, you need to escape it using a backslash (`\\`).\n\nExample:\n\n::: {#b228c81d .cell execution_count=7}\n``` {.python .cell-code}\npattern = r\"\\$100\"  # Matches the string \"$100\"\ntext = \"The price is $100.\"\nmatch = re.search(pattern, text)\n\nif match:\n    print(\"Price found:\", match.group()) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPrice found: $100\n```\n:::\n:::\n\n\n### Flags in Regex\n\nYou can modify the behavior of regex with flags, such as:\n- `re.IGNORECASE` or `re.I` : Makes the regex case-insensitive.\n- `re.MULTILINE` or `re.M` : Allows `^` and `$` to match the start and end of each line in a multi-line string.\n- `re.DOTALL` or `re.S` : Makes `.` match newlines as well.\n\n::: {#0dde2b14 .cell execution_count=8}\n``` {.python .cell-code}\npattern = r\"hello\"\ntext = \"HELLO world\"\nmatch = re.search(pattern, text, re.IGNORECASE)\n\nif match:\n    print(\"Case-insensitive match found!\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCase-insensitive match found!\n```\n:::\n:::\n\n\n## Use Cases\n\n### No Match - Exception\n\n`if match is None`\n\n::: {#48be3460 .cell execution_count=9}\n``` {.python .cell-code}\nclass Money:\n    def __init__(self, dollars, cents):\n        self.dollars = dollars\n        self.cents = cents\n    def __repr__(self):\n        return f\"Money({self.dollars}, {self.cents})\"\n```\n:::\n\n\n::: {#f2351f67 .cell execution_count=10}\n``` {.python .cell-code}\nimport re\ndef money_from_string(amount):\n    match = re.search(\n        r'^\\$(?P<dollars>\\d+)\\.(?P<cents>\\d\\d)$', amount)\n    # Adding the next two lines here\n    if match is None:\n        raise ValueError(f\"Invalid amount: {amount}\")\n    dollars = int(match.group('dollars'))\n    cents = int(match.group('cents'))\n    return Money(dollars, cents)\n```\n:::\n\n\n::: {#9c7f426c .cell execution_count=11}\n``` {.python .cell-code}\nmoney_from_string(\"$12.34\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nMoney(12, 34)\n```\n:::\n:::\n\n\n::: {#991cf74a .cell execution_count=12}\n``` {.python .cell-code}\ntry:\n    money_from_string(\"Big\")\nexcept ValueError as e:\n    print(e)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInvalid amount: Big\n```\n:::\n:::\n\n\n",
    "supporting": [
      "regex_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "1f1b892d0e2e83f972900ef4deb26bb5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Functions 02\"\n---\n\n\n\n\n## Arguments\n\n### Postion & Keywords\n\n```python\ndef f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n```\n\n`/` and `*` are optional. If used, these symbols indicate the kind of parameter by how the arguments may be passed to the function: positional-only, positional-or-keyword, and keyword-only. Keyword parameters are also referred to as named parameters.\n\n::: {#372d184f .cell execution_count=1}\n``` {.python .cell-code}\ndef cheeseshop(kind, *arguments, **keywords):\n    print(\"-- Do you have any\", kind, \"?\")\n    print(\"-- I'm sorry, we're all out of\", kind)\n    for arg in arguments:\n        print(arg)\n    print(\"-\" * 40)\n    for kw in keywords:\n        print(kw, \":\", keywords[kw])\n```\n:::\n\n\n::: {#a5ca85be .cell execution_count=2}\n``` {.python .cell-code}\ncheeseshop(\"Limburger\", \n            # Postional as tuple\n            \"It's very runny, sir.\",\n           \"It's really very, VERY runny, sir.\",\n            # Keywords as dict\n           shopkeeper=\"Michael Palin\",\n           client=\"John Cleese\",\n           sketch=\"Cheese Shop Sketch\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-- Do you have any Limburger ?\n-- I'm sorry, we're all out of Limburger\nIt's very runny, sir.\nIt's really very, VERY runny, sir.\n----------------------------------------\nshopkeeper : Michael Palin\nclient : John Cleese\nsketch : Cheese Shop Sketch\n```\n:::\n:::\n\n\n### Unpacking Args\n\n**List**\n\n::: {#84d32d30 .cell execution_count=3}\n``` {.python .cell-code}\nlist(range(3, 6))            # normal call with separate arguments\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[3, 4, 5]\n```\n:::\n:::\n\n\n::: {#6b5d5805 .cell execution_count=4}\n``` {.python .cell-code}\nargs = [3, 6]\nlist(range(*args))            # call with arguments unpacked from a list\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n[3, 4, 5]\n```\n:::\n:::\n\n\n**Dict**\n\n::: {#d780e0d6 .cell execution_count=5}\n``` {.python .cell-code}\ndef parrot(voltage, state='a stiff', action='voom'):\n    print(\"-- This parrot wouldn't\", action, end=' ')\n    print(\"if you put\", voltage, \"volts through it.\", end=' ')\n    print(\"E's\", state, \"!\")\n\nd = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"}\nparrot(**d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !\n```\n:::\n:::\n\n\n## Function Factory\n\n::: {#6a89e613 .cell execution_count=6}\n``` {.python .cell-code}\ndef make_incrementor(n):\n    return lambda x: x + n\n\nf = make_incrementor(42)\nf(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n42\n```\n:::\n:::\n\n\n::: {#0edc7b01 .cell execution_count=7}\n``` {.python .cell-code}\nf(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n43\n```\n:::\n:::\n\n\n## Function Annotation\n\n::: {#f891fe74 .cell execution_count=8}\n``` {.python .cell-code}\ndef f(ham: str, eggs: str = 'eggs') -> str:\n    print(\"Annotations:\", f.__annotations__)\n    print(\"Arguments:\", ham, eggs)\n    return ham + ' and ' + eggs\n\nf('spam')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnnotations: {'ham': <class 'str'>, 'eggs': <class 'str'>, 'return': <class 'str'>}\nArguments: spam eggs\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'spam and eggs'\n```\n:::\n:::\n\n\nNB: Type hinting doesn't throw error when input the wrong type.\n\n## Function Documentation\n\n::: {#e6fd8ad7 .cell execution_count=9}\n``` {.python .cell-code}\ndef say_hello(name):\n    \"\"\"A simple function that says hello... Richie style\"\"\"\n    print(f\"Hello {name}, is it me you're looking for?\")\n```\n:::\n\n\nObtain docstring by:\n\n- `help()`\n\n::: {#9e57f0bc .cell execution_count=10}\n``` {.python .cell-code}\nhelp(say_hello)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on function say_hello in module __main__:\n\nsay_hello(name)\n    A simple function that says hello... Richie style\n\n```\n:::\n:::\n\n\n- `__doc__`\n\n::: {#f6fa08e2 .cell execution_count=11}\n``` {.python .cell-code}\nsay_hello.__doc__\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'A simple function that says hello... Richie style'\n```\n:::\n:::\n\n\n`print()` will invoke `str()` \n\n::: {#2dcf5e1c .cell execution_count=12}\n``` {.python .cell-code}\nprint(say_hello)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<function say_hello at 0x136169ea0>\n```\n:::\n:::\n\n\n::: {#cf9e1b6d .cell execution_count=13}\n``` {.python .cell-code}\nstr(say_hello)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'<function say_hello at 0x136169ea0>'\n```\n:::\n:::\n\n\n::: {#7b03e354 .cell execution_count=14}\n``` {.python .cell-code}\nrepr(say_hello)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'<function say_hello at 0x136169ea0>'\n```\n:::\n:::\n\n\n## Wrapper function\n\n::: {#bd6bbb65 .cell execution_count=15}\n``` {.python .cell-code}\ndef external_fn(a, b, c=10, d=20, *args, **kwargs):\n    print(f\"a: {a}, b: {b}, c: {c}, d: {d}\")\n    print(f\"Additional positional arguments: {args}\")\n    print(f\"Additional keyword arguments: {kwargs}\")\n```\n:::\n\n\n::: {#1a6b1972 .cell execution_count=16}\n``` {.python .cell-code}\ndef my_wrapper(a, b, *args, **kwargs):\n    # You can add any pre-processing logic here\n    print(\"Inside my_wrapper:\")\n    \n    # Call the external function with the provided arguments\n    external_fn(a, b, *args, **kwargs)\n\n    # You can add any post-processing logic here\n    print(\"Exiting my_wrapper\")\n```\n:::\n\n\n::: {#0e571bc1 .cell execution_count=17}\n``` {.python .cell-code}\nmy_wrapper(1, 2, 3, 4, 5, e=50, f=60)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInside my_wrapper:\na: 1, b: 2, c: 3, d: 4\nAdditional positional arguments: (5,)\nAdditional keyword arguments: {'e': 50, 'f': 60}\nExiting my_wrapper\n```\n:::\n:::\n\n\n## Wrapper Class\n\n::: {#e4f8411e .cell execution_count=18}\n``` {.python .cell-code}\nclass External_Class:\n    def __init__(self, a, b, c=10, d=20, *args, **kwargs):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.d = d\n        self.additional_args = args\n        self.additional_kwargs = kwargs\n        print(f\"External_Class initialized with: a={a}, b={b}, c={c}, d={d}\")\n        print(f\"Additional positional arguments: {args}\")\n        print(f\"Additional keyword arguments: {kwargs}\")\n\n    def display(self):\n        print(f\"a: {self.a}, b: {self.b}, c: {self.c}, d: {self.d}\")\n        print(f\"Additional positional arguments: {self.additional_args}\")\n        print(f\"Additional keyword arguments: {self.additional_kwargs}\")\n```\n:::\n\n\n::: {#e05b5d62 .cell execution_count=19}\n``` {.python .cell-code}\nclass My_Wrapper(External_Class):\n    def __init__(self, a, b, *args, **kwargs):\n        # You can add any pre-initialization logic here\n        print(\"Inside My_Wrapper __init__\")\n\n        # Initialize the base class (External_Class) with the provided arguments\n        super().__init__(a, b, *args, **kwargs)\n\n        # You can add any post-initialization logic here\n        print(\"Exiting My_Wrapper __init__\")\n```\n:::\n\n\n::: {#9244f822 .cell execution_count=20}\n``` {.python .cell-code}\n# Example usage of My_Wrapper\nwrapper_instance = My_Wrapper(1, 2, 3, 4, 5, e=50, f=60)\n\n# Call a method from the base class to see the stored values\nwrapper_instance.display()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nInside My_Wrapper __init__\nExternal_Class initialized with: a=1, b=2, c=3, d=4\nAdditional positional arguments: (5,)\nAdditional keyword arguments: {'e': 50, 'f': 60}\nExiting My_Wrapper __init__\na: 1, b: 2, c: 3, d: 4\nAdditional positional arguments: (5,)\nAdditional keyword arguments: {'e': 50, 'f': 60}\n```\n:::\n:::\n\n\n",
    "supporting": [
      "function-02_files"
    ],
    "filters": [],
    "includes": {}
  }
}
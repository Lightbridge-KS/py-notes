{
  "hash": "e3b28c1adc892c04e5245e892a93dd83",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Functions 02\"\n---\n\n## Arguments\n\n### Postion & Keywords\n\n```python\ndef f(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):\n```\n\n`/` and `*` are optional. If used, these symbols indicate the kind of parameter by how the arguments may be passed to the function: positional-only, positional-or-keyword, and keyword-only. Keyword parameters are also referred to as named parameters.\n\n::: {#a70e551b .cell execution_count=1}\n``` {.python .cell-code}\ndef cheeseshop(kind, *arguments, **keywords):\n    print(\"-- Do you have any\", kind, \"?\")\n    print(\"-- I'm sorry, we're all out of\", kind)\n    for arg in arguments:\n        print(arg)\n    print(\"-\" * 40)\n    for kw in keywords:\n        print(kw, \":\", keywords[kw])\n```\n:::\n\n\n::: {#07517236 .cell execution_count=2}\n``` {.python .cell-code}\ncheeseshop(\"Limburger\", \n            # Postional as tuple\n            \"It's very runny, sir.\",\n           \"It's really very, VERY runny, sir.\",\n            # Keywords as dict\n           shopkeeper=\"Michael Palin\",\n           client=\"John Cleese\",\n           sketch=\"Cheese Shop Sketch\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-- Do you have any Limburger ?\n-- I'm sorry, we're all out of Limburger\nIt's very runny, sir.\nIt's really very, VERY runny, sir.\n----------------------------------------\nshopkeeper : Michael Palin\nclient : John Cleese\nsketch : Cheese Shop Sketch\n```\n:::\n:::\n\n\n### Unpacking Args\n\n**List**\n\n::: {#be488a15 .cell execution_count=3}\n``` {.python .cell-code}\nlist(range(3, 6))            # normal call with separate arguments\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[3, 4, 5]\n```\n:::\n:::\n\n\n::: {#d046510f .cell execution_count=4}\n``` {.python .cell-code}\nargs = [3, 6]\nlist(range(*args))            # call with arguments unpacked from a list\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n[3, 4, 5]\n```\n:::\n:::\n\n\n**Dict**\n\n::: {#b305e535 .cell execution_count=5}\n``` {.python .cell-code}\ndef parrot(voltage, state='a stiff', action='voom'):\n    print(\"-- This parrot wouldn't\", action, end=' ')\n    print(\"if you put\", voltage, \"volts through it.\", end=' ')\n    print(\"E's\", state, \"!\")\n\nd = {\"voltage\": \"four million\", \"state\": \"bleedin' demised\", \"action\": \"VOOM\"}\nparrot(**d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n-- This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised !\n```\n:::\n:::\n\n\n## Function Factory\n\n::: {#c1f6aa91 .cell execution_count=6}\n``` {.python .cell-code}\ndef make_incrementor(n):\n    return lambda x: x + n\n\nf = make_incrementor(42)\nf(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n42\n```\n:::\n:::\n\n\n::: {#28397f33 .cell execution_count=7}\n``` {.python .cell-code}\nf(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n43\n```\n:::\n:::\n\n\n## Function Annotation\n\n::: {#08f9326f .cell execution_count=8}\n``` {.python .cell-code}\ndef f(ham: str, eggs: str = 'eggs') -> str:\n    print(\"Annotations:\", f.__annotations__)\n    print(\"Arguments:\", ham, eggs)\n    return ham + ' and ' + eggs\n\nf('spam')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnnotations: {'ham': <class 'str'>, 'eggs': <class 'str'>, 'return': <class 'str'>}\nArguments: spam eggs\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'spam and eggs'\n```\n:::\n:::\n\n\nNB: Type hinting doesn't throw error when input the wrong type.\n\n## Function Documentation\n\n::: {#85da3b24 .cell execution_count=9}\n``` {.python .cell-code}\ndef say_hello(name):\n    \"\"\"A simple function that says hello... Richie style\"\"\"\n    print(f\"Hello {name}, is it me you're looking for?\")\n```\n:::\n\n\nObtain docstring by:\n\n- `help()`\n\n::: {#7f6b8d40 .cell execution_count=10}\n``` {.python .cell-code}\nhelp(say_hello)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHelp on function say_hello in module __main__:\n\nsay_hello(name)\n    A simple function that says hello... Richie style\n\n```\n:::\n:::\n\n\n- `__doc__`\n\n::: {#d3f63d02 .cell execution_count=11}\n``` {.python .cell-code}\nsay_hello.__doc__\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'A simple function that says hello... Richie style'\n```\n:::\n:::\n\n\n`print()` will invoke `str()` \n\n::: {#140c3731 .cell execution_count=12}\n``` {.python .cell-code}\nprint(say_hello)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<function say_hello at 0x10bead360>\n```\n:::\n:::\n\n\n::: {#321e7e45 .cell execution_count=13}\n``` {.python .cell-code}\nstr(say_hello)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n'<function say_hello at 0x10bead360>'\n```\n:::\n:::\n\n\n::: {#19401ec2 .cell execution_count=14}\n``` {.python .cell-code}\nrepr(say_hello)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'<function say_hello at 0x10bead360>'\n```\n:::\n:::\n\n\n",
    "supporting": [
      "function-02_files"
    ],
    "filters": [],
    "includes": {}
  }
}
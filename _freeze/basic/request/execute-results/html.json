{
  "hash": "e0c5c9de91b795d513f7f5d7544734d2",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Request\n---\n\n\n\n\n## HTTP Basic\n\nThe Hypertext Transfer Protocol (HTTP) is the foundation of any data exchange on the Web and it is a protocol used to transfer hypertext requests and information between clients (typically web browsers) and servers. Here’s a breakdown of some basic HTTP methods and their typical use cases:\n\n### HTTP Basics\n\n- **Request/Response Model**: HTTP operates as a request-response protocol. A client (such as a web browser) sends an HTTP request to the server, which then sends back an HTTP response. This communication can include the transfer of HTML, images, video, and other types of data.\n  \n- **Stateless**: Each request from the client to the server is independent. This means that the server does not retain any information about previous requests from the client (unless mechanisms like cookies or sessions are used).\n\n### HTTP Methods\n\nHTTP defines a set of request methods to indicate the desired action to be performed on a particular resource. The most common methods are:\n\n#### **GET**\n\n- **Purpose**: Retrieve data from the server.\n- **Usage**: Used for fetching documents, images, or any resource.\n- **Characteristics**:\n  - Should not modify any resources on the server (idempotent and safe).\n  - Can include URL parameters (query strings) to request specific data.\n  - Example: `GET /index.html`\n- **Example Use Case**: Accessing a webpage, fetching user profile data.\n\n#### **POST**\n\n- **Purpose**: Submit data to the server, usually for creating or updating resources.\n- **Usage**: Used when sending form data, uploading a file, or creating a new database record.\n- **Characteristics**:\n  - Data is sent in the body of the request, not the URL.\n  - May cause a change in the server state (non-idempotent).\n  - Example: `POST /submit-form`\n- **Example Use Case**: Submitting a login form or posting a comment on a blog.\n\n#### **PUT**\n\n- **Purpose**: Replace or update an existing resource.\n- **Usage**: Used when updating an entire resource or creating a resource at a specific location.\n- **Characteristics**:\n  - If the resource does not exist, it can create a new one.\n  - It is idempotent (sending the same PUT request multiple times will have the same effect as sending it once).\n  - Example: `PUT /users/123`\n- **Example Use Case**: Updating user information.\n\n#### **PATCH**\n\n- **Purpose**: Partially update an existing resource.\n- **Usage**: Used when only specific fields of a resource need to be updated.\n- **Characteristics**:\n  - Not necessarily idempotent.\n  - Example: `PATCH /users/123`\n- **Example Use Case**: Updating a single field in a user's profile, such as their email address.\n\n#### **DELETE**\n\n- **Purpose**: Remove a resource from the server.\n- **Usage**: Used when deleting a specific resource (e.g., user, article).\n- **Characteristics**:\n  - Typically idempotent.\n  - Example: `DELETE /users/123`\n- **Example Use Case**: Deleting a user account or removing a comment.\n\n#### **OPTIONS**\n\n- **Purpose**: Describe the communication options for the target resource.\n- **Usage**: Used to determine the capabilities of the server (e.g., which HTTP methods are allowed for a particular URL).\n- **Characteristics**:\n  - Does not modify server state.\n  - Example: `OPTIONS /users`\n- **Example Use Case**: Pre-flight requests in CORS (Cross-Origin Resource Sharing).\n\n#### **HEAD**\n\n- **Purpose**: Similar to GET, but only retrieves the headers (no body).\n- **Usage**: Used to check what a GET request would return, before making the actual request.\n- **Characteristics**:\n  - No body content is returned, only headers.\n  - Example: `HEAD /index.html`\n- **Example Use Case**: Checking if a resource exists or getting the last modified date without downloading the entire resource.\n\n### HTTP Status Codes\n\nHTTP responses include status codes that indicate the result of the request:\n\n- **1xx**: Informational – Request received, continuing process.\n- **2xx**: Success – The request was successfully received, understood, and accepted.\n  - `200 OK`: Successful GET, POST, etc.\n  - `201 Created`: Successful POST (new resource created).\n- **3xx**: Redirection – Further action needs to be taken to complete the request.\n  - `301 Moved Permanently`: The resource has been permanently moved to a new URL.\n- **4xx**: Client Error – The request contains bad syntax or cannot be fulfilled.\n  - `400 Bad Request`: Malformed request syntax.\n  - `404 Not Found`: Resource not found.\n- **5xx**: Server Error – The server failed to fulfill a valid request.\n  - `500 Internal Server Error`: An unexpected condition was encountered.\n\n### Examples\n\n- **GET Request Example:**\n  \n  ```http\n  GET /api/v1/users HTTP/1.1\n  Host: www.example.com\n  ```\n\n- **POST Request Example:**\n\n  ```http\n  POST /api/v1/users HTTP/1.1\n  Host: www.example.com\n  Content-Type: application/json\n\n  {\n    \"username\": \"example_user\",\n    \"password\": \"example_pass\"\n  }\n  ```\n\n### Security Considerations\n\n- **HTTPS**: HTTP Secure (HTTPS) is the secure version of HTTP, which encrypts the communication using SSL/TLS to protect against eavesdropping and man-in-the-middle attacks.\n- **Authentication**: Common methods include Basic Auth, Token-based Auth (JWT), and OAuth.\n- **CSRF & CORS**: Cross-Site Request Forgery (CSRF) and Cross-Origin Resource Sharing (CORS) are considerations when building secure web applications.\n\nHTTP is fundamental to web development, and understanding these concepts is crucial for working with APIs, web services, or any network-based communication.\n\nThe `requests` package is a popular Python library used for making HTTP requests. It abstracts the complexities of making requests behind a simple API, allowing you to send HTTP requests and handle responses easily.\n\n\n## Request Package\n\n### `GET`\n\n::: {#16d2ca99 .cell execution_count=1}\n``` {.python .cell-code}\nimport requests\n\n# Send a GET request to a URL\nresponse = requests.get('https://jsonplaceholder.typicode.com/posts/1')\n\n# Print response status and content\nprint(f\"Status Code: {response.status_code}\")\nprint(\"Response Content:\", response.json())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStatus Code: 200\nResponse Content: {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto'}\n```\n:::\n:::\n\n\n### `POST`\n\n::: {#231c12af .cell execution_count=2}\n``` {.python .cell-code}\nimport requests\n\n# Data to be sent in the body of the POST request\ndata = {\n    \"title\": \"foo\",\n    \"body\": \"bar\",\n    \"userId\": 1\n}\n\n# Send a POST request to create a new post\nresponse = requests.post('https://jsonplaceholder.typicode.com/posts', json=data)\n\n# Print response status and content\nprint(f\"Status Code: {response.status_code}\")\nprint(\"Response Content:\", response.json())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStatus Code: 201\nResponse Content: {'title': 'foo', 'body': 'bar', 'userId': 1, 'id': 101}\n```\n:::\n:::\n\n\n**Explanation**:  \n\n- This example sends a `POST` request to create a new post on the server.\n- The `json=data` parameter automatically serializes the `data` dictionary into JSON format.\n- The response should contain the details of the newly created resource.\n\n### `PUT`\n\n::: {#e4c7517c .cell execution_count=3}\n``` {.python .cell-code}\nimport requests\n\n# Data to update an existing post\nupdate_data = {\n    \"title\": \"Updated Title\",\n    \"body\": \"Updated Body\",\n    \"userId\": 1\n}\n\n# Send a PUT request to update a specific post\nresponse = requests.put('https://jsonplaceholder.typicode.com/posts/1', json=update_data)\n\n# Print response status and content\nprint(f\"Status Code: {response.status_code}\")\nprint(\"Response Content:\", response.json())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStatus Code: 200\nResponse Content: {'title': 'Updated Title', 'body': 'Updated Body', 'userId': 1, 'id': 1}\n```\n:::\n:::\n\n\n**Explanation**:  \n\n- This example updates an existing post (with ID = 1) using the `PUT` method.\n- The entire resource is replaced with the new content provided in `update_data`.\n\n\n### `DELETE`\n\n::: {#a8ba8049 .cell execution_count=4}\n``` {.python .cell-code}\nimport requests\n\n# Send a DELETE request to remove a specific post\nresponse = requests.delete('https://jsonplaceholder.typicode.com/posts/1')\n\n# Print response status\nprint(f\"Status Code: {response.status_code}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStatus Code: 200\n```\n:::\n:::\n\n\n**Explanation**:  \n\n- This example sends a `DELETE` request to remove the post with ID = 1.\n- The response does not contain content but should return a status code indicating the result of the operation.\n\n\n### Handling Response Headers and Parameters\n\n::: {#8937e5d6 .cell execution_count=5}\n``` {.python .cell-code}\nimport requests\n\n# Specify headers and query parameters\nheaders = {'Authorization': 'Bearer <your-token>'}\nparams = {'userId': 1}\n\n# Send a GET request with custom headers and query parameters\nresponse = requests.get('https://jsonplaceholder.typicode.com/posts', headers=headers, params=params)\n\n# Print response status and content\nprint(f\"Status Code: {response.status_code}\")\nprint(\"Response Content:\", response.json())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStatus Code: 200\nResponse Content: [{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto'}, {'userId': 1, 'id': 2, 'title': 'qui est esse', 'body': 'est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla'}, {'userId': 1, 'id': 3, 'title': 'ea molestias quasi exercitationem repellat qui ipsa sit aut', 'body': 'et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut'}, {'userId': 1, 'id': 4, 'title': 'eum et est occaecati', 'body': 'ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit'}, {'userId': 1, 'id': 5, 'title': 'nesciunt quas odio', 'body': 'repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque'}, {'userId': 1, 'id': 6, 'title': 'dolorem eum magni eos aperiam quia', 'body': 'ut aspernatur corporis harum nihil quis provident sequi\\nmollitia nobis aliquid molestiae\\nperspiciatis et ea nemo ab reprehenderit accusantium quas\\nvoluptate dolores velit et doloremque molestiae'}, {'userId': 1, 'id': 7, 'title': 'magnam facilis autem', 'body': 'dolore placeat quibusdam ea quo vitae\\nmagni quis enim qui quis quo nemo aut saepe\\nquidem repellat excepturi ut quia\\nsunt ut sequi eos ea sed quas'}, {'userId': 1, 'id': 8, 'title': 'dolorem dolore est ipsam', 'body': 'dignissimos aperiam dolorem qui eum\\nfacilis quibusdam animi sint suscipit qui sint possimus cum\\nquaerat magni maiores excepturi\\nipsam ut commodi dolor voluptatum modi aut vitae'}, {'userId': 1, 'id': 9, 'title': 'nesciunt iure omnis dolorem tempora et accusantium', 'body': 'consectetur animi nesciunt iure dolore\\nenim quia ad\\nveniam autem ut quam aut nobis\\net est aut quod aut provident voluptas autem voluptas'}, {'userId': 1, 'id': 10, 'title': 'optio molestias id quia eum', 'body': 'quo et expedita modi cum officia vel magni\\ndoloribus qui repudiandae\\nvero nisi sit\\nquos veniam quod sed accusamus veritatis error'}]\n```\n:::\n:::\n\n\n**Explanation**:  \n\n- Custom headers (`headers`) and query parameters (`params`) are used in this request.\n- The `params` dictionary is serialized and appended to the URL as a query string, while the `headers` dictionary is sent with the request headers.\n\n\n### Error Handling with `requests`\n\nIt’s essential to handle errors, as network requests can fail for various reasons (e.g., server not responding, timeout).\n\n::: {#f3bf8dfe .cell execution_count=6}\n``` {.python .cell-code}\nimport requests\n\ntry:\n    # Send a GET request to an invalid URL\n    response = requests.get('https://jsonplaceholder.typicode.com/invalid-url')\n    response.raise_for_status()  # Check if the request was successful\nexcept requests.exceptions.HTTPError as http_err:\n    print(f\"HTTP error occurred: {http_err}\")  # HTTP error (e.g., 404, 500)\nexcept requests.exceptions.ConnectionError:\n    print(\"Error connecting to the server\")\nexcept requests.exceptions.Timeout:\n    print(\"Request timed out\")\nexcept requests.exceptions.RequestException as err:\n    print(f\"An error occurred: {err}\")  # Catch all other errors\nelse:\n    print(\"Request was successful!\")\n    print(\"Response Content:\", response.json())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHTTP error occurred: 404 Client Error: Not Found for url: https://jsonplaceholder.typicode.com/invalid-url\n```\n:::\n:::\n\n\n### Using Sessions for Persistent Parameters\n\nIf you need to maintain certain parameters or headers across multiple requests (e.g., authentication tokens), you can use a `Session`:\n\n::: {#9527a0d2 .cell execution_count=7}\n``` {.python .cell-code}\nimport requests\n\n# Create a session object\nsession = requests.Session()\n\n# Set default headers for the session\nsession.headers.update({'Authorization': 'Bearer <your-token>'})\n\n# Send multiple requests using the same session\nresponse1 = session.get('https://jsonplaceholder.typicode.com/posts')\nresponse2 = session.get('https://jsonplaceholder.typicode.com/users')\n\n# Print response status and content\nprint(\"Response 1 Status Code:\", response1.status_code)\nprint(\"Response 2 Status Code:\", response2.status_code)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResponse 1 Status Code: 200\nResponse 2 Status Code: 200\n```\n:::\n:::\n\n\n**Explanation**:\n\n- The `Session` object allows you to persist headers, cookies, and other parameters across multiple requests without redefining them for each request.\n\nThese examples cover the basic usage of `requests` for interacting with APIs and servers using HTTP methods such as GET, POST, PUT, and DELETE, as well as handling errors and maintaining persistent sessions.\n\n",
    "supporting": [
      "request_files"
    ],
    "filters": [],
    "includes": {}
  }
}
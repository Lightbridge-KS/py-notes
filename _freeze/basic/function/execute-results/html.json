{
  "hash": "13aa74beaa19150ac35abb891f25c530",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Functions\"\n---\n\n\n\n\n## Define a Function\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef greet():\n  \"\"\"Greeeting\"\"\"\n  print(\"Hello World\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngreet()\n#> Hello World\n```\n:::\n\n\n## Arguments\n\nTerminology: `key` = `value`\n\n-   **Parameters** are like `key`\n-   **Arguments** are like `value` that supply to the parameters\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef greet(first, last):\n  \"\"\"Greeeting someone\"\"\"\n  print(f\"Hello {first} {last}\")\n  print(\"Welcome aboard!\")\n```\n:::\n\n\n**Parameters** = `first`, `last`\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngreet(\"Ada\", \"Lovelace\")\n#> Hello Ada Lovelace\n#> Welcome aboard!\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Using Keyword args\ngreet(first = \"Mary\",last=\"John\")\n#> Hello Mary John\n#> Welcome aboard!\n```\n:::\n\n\nDefault parameter must come after required parameter\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef increment(x, by = 1):\n  return x + by\n\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nincrement(2)\n#> 3\nincrement(2, 2)\n#> 4\n```\n:::\n\n\n**Arguments** = \"Ada\", \"Lovelace\"\n\n### Args Type Hint\n\nFor Python 3.9 and earlier:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom typing import Union, List\n\ndef num_or_list(x: Union[float, List[float]]) -> None:\n    if isinstance(x, float):\n        print(\"x is float\")\n    elif isinstance(x, list):\n        print(\"x is list\")\n```\n:::\n\n\nFor Python 3.10 and later:\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef num_or_list(x: float | list[float]) -> None:\n    if isinstance(x, float):\n        print(\"x is float\")\n    elif isinstance(x, list):\n        print(\"x is list\")\n```\n:::\n\n\n\n## Return\n\nreturn a value with `return` statement\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef get_greet(name):\n  return f\"Hello {name}\"\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(get_greet(\"mom\"))\n#> Hello mom\n```\n:::\n\n\nBy default function return `None`, if not provide return value.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef myfun():\n  print(\"Hi\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nprint(myfun())\n#> Hi\n#> None\n```\n:::\n\n\n## Scoping\n\n::: callout-note\nVariables are scoped at the **function level**\n:::\n\nThis is similar to `R`.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Global Var\nname, age = \"Joy\", 10\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndef greet(name = \"mark\"):\n  age = 20\n  return {\"name\": name, \"age\": age}\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngreet()\n#> {'name': 'mark', 'age': 20}\nname\n#> 'Joy'\nage\n#> 10\n```\n:::\n\n\n\n## xargs\n\nuse `*args` to receives any number of arguments to the function.\n\nRef: [official doc](https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists)\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef multi(*numbers):\n  return numbers\n\n \na = multi(1, 3)\na\n#> (1, 3)\ntype(a)\n#> <class 'tuple'>\n```\n:::\n\n\n**xargs** is a **tuple**. Let's iterate over \"tuple\"\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef multi(*numbers):\n  for number in numbers:\n    print(number)\n\n    \n```\n:::\n\n\nMust be positional argument only\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmulti(1, 2, 3)\n#> 1\n#> 2\n#> 3\n```\n:::\n\n\nkeyword args is not allowed\n\n\n::: {.cell}\n\n```{.python .cell-code}\nmulti(a = 1)\n#> TypeError: multi() got an unexpected keyword argument 'a'\n```\n:::\n\n\n### Exercise\n\nLet's multiply any input of numbers.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef multiply(*numbers):\n  total = 1\n  for number in numbers:\n    total *= number\n  return(total)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmultiply(2, 3, 4)\n#> 24\n```\n:::\n\n\nSame logic using `R`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiply_r1 <- function(...) {\n  \n  numbers <- list(...)\n  total <- 1\n  for (number in numbers) {\n    total <- total * number\n  }\n  total\n}\n\nmultiply_r1(1, 2, 3)\n#> [1] 6\n```\n:::\n\n\nOr using `R` functional programming by `base::Reduce()` or `purrr::reduce()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmultiply_r2 <- function(...) Reduce(`*`, list(...))\n\nmultiply_r2(1, 2, 3)\n#> [1] 6\n```\n:::\n\n\n## xxargs\n\nUse `**args` to capture any number of **keyword arguments** as **dictionary**.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef save_user(**user):\n  return user\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nusr = save_user(id = 1, name = \"mike\")\nusr\n#> {'id': 1, 'name': 'mike'}\ntype(usr)\n#> <class 'dict'>\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nusr[\"id\"]\n#> 1\nusr[\"name\"]\n#> 'mike'\n```\n:::\n\n\nIf supply positional arg will fail.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nsave_user(\"mike\")\n#> TypeError: save_user() takes 0 positional arguments but 1 was given\n```\n:::\n",
    "supporting": [
      "function_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "f2e773f6fbbb83747cc6de95d1e91bcb",
  "result": {
    "engine": "knitr",
    "markdown": "# Exception \n\n\n\n\n\n[Python Exception (realpython)](https://realpython.com/python-exceptions/)\n\n- `raise`: allows you to throw an exception at any time.\n- `assert`: enables you to verify if a certain condition is met and throw an exception if it isn’t.\n- In the `try` clause, all statements are executed until an exception is encountered.\n- `except` is used to catch and handle the exception(s) that are encountered in the try clause.\n- `else` lets you code sections that should run only when no exceptions are encountered in the try clause.\n- `finally` enables you to execute sections of code that should always run, with or without any previously encountered exceptions.\n\n## Raising Exception\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nx = 10\nif x > 5:\n    raise Exception('x should not exceed 5. The value of x was: {}'.format(x))\n#> x should not exceed 5. The value of x was: 10\n```\n:::\n\n\n## `AssertionError` Exception\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport sys\nassert ('linux' in sys.platform), \"This code runs on Linux only.\"\n#> This code runs on Linux only.\n```\n:::\n\n\n## `try` and `except` Block\n\nPython executes code following the `try` statement as a “normal” part of the program. The code that follows the `except` statement is the program’s response to any exceptions in the preceding `try` clause.\n\n### Ex: Linux function\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef linux_interaction():\n    assert ('linux' in sys.platform), \"Function can only run on Linux systems.\"\n    print('Doing something.')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndef mac_interaction():\n    assert ('darwin' in sys.platform), \"Function can only run on MacOS systems.\"\n    print('Doing something.')\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    linux_interaction()\nexcept:\n    print('Linux function was not executed')\n#> Linux function was not executed\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    linux_interaction()\nexcept AssertionError as error:\n    print(error)\n    print('The linux_interaction() function was not executed')\n#> Function can only run on Linux systems.\n#> The linux_interaction() function was not executed\n```\n:::\n\n\n### Ex: Int & Float\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef get_int(x):\n    try:\n        return int(x)\n    except ValueError:\n        print(f\"'{x}' is not a number\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nget_int(5)\n#> 5\nget_int(-1)\n#> -1\nget_int(5.6)\n#> 5\nget_int(\"cat\")\n#> 'cat' is not a number\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndef attempt_float(x):\n    try:\n        return float(x)\n    except ValueError:\n        return x\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nattempt_float(\"2\")\n#> 2.0\nattempt_float(\"X\")\n#> 'X'\n```\n:::\n\n\n\n\nusing `pass` to return `NoneType` and not print anything\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndef get_int2(x):\n    try:\n        return int(x)\n    except ValueError:\n        pass\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nget_int2(2)\n#> 2\nget_int2(\"Cat\") # Nothing\n\ntype(get_int2(\"Cat\"))\n#> <class 'NoneType'>\n```\n:::\n\n\n\n\n`isnumeric()` to check whether string is all numeric. But, it's not very effective:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\"123\".isnumeric() # Only case that works\n#> True\n\"12.3\".isnumeric()\n#> False\n\"-1\".isnumeric()\n#> False\n\"cat\".isnumeric()\n#> False\n```\n:::\n\n\n### Ex: Try open file\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    with open('file.log') as file:\n        read_data = file.read()\nexcept:\n    print('Could not open file.log')\n#> Could not open file.log\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    with open('file.log') as file:\n        read_data = file.read()\nexcept FileNotFoundError as fnf_error:\n    print(fnf_error)\n#> [Errno 2] No such file or directory: 'file.log'\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    linux_interaction() # <-- AssertionError trigger in this line\n    with open('file.log') as file:\n        read_data = file.read()\nexcept FileNotFoundError as fnf_error:\n    print(fnf_error)\nexcept AssertionError as error: \n    print(error) \n    print('Linux linux_interaction() function was not executed')\n#> Function can only run on Linux systems.\n#> Linux linux_interaction() function was not executed\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    mac_interaction()\n    with open('file.log') as file: # <-- FileNotFoundError trigger in this line\n        read_data = file.read()\nexcept FileNotFoundError as fnf_error:\n    print(fnf_error)\nexcept AssertionError as error:\n    print(error)\n    print('Linux mac_interaction() function was not executed')\n#> Doing something.\n#> [Errno 2] No such file or directory: 'file.log'\n```\n:::\n\n\n## `else` clause\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    mac_interaction() # Pass\nexcept AssertionError as error:\n    print(error)\nelse:\n    print('Executing the else clause.')\n#> Doing something.\n#> Executing the else clause.\n```\n:::\n\n\n### `try-except-else-finally`\n\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    mac_interaction()\nexcept AssertionError as error:\n    print(error)\nelse:\n    try:\n        with open('file.log') as file:\n            read_data = file.read()\n    except FileNotFoundError as fnf_error:\n        print(fnf_error)\nfinally:\n    print('Cleaning up, irrespective of any exceptions.')\n#> Doing something.\n#> [Errno 2] No such file or directory: 'file.log'\n#> Cleaning up, irrespective of any exceptions.\n```\n:::\n\n\n\n### Always close File \n\n```python\nf = open(path, mode=\"w\")\n\ntry:\n    write_to_file(f)\nexcept:\n    print(\"Failed\")\nelse:\n    print(\"Succeeded\")\nfinally:\n    f.close()\n```\n\n## Custom Exception\n\nCustom exceptions initialize by creating a class that inherits from the base `Exception` class of Python\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass MyCustomException(Exception):\n    pass\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nraise MyCustomException('A custom message for my custom exception')\n#> A custom message for my custom exception\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ntry:\n    raise MyCustomException('A custom message for my custom exception')\nexcept MyCustomException:\n    print('My custom exception was raised')\n#> My custom exception was raised\n```\n:::",
    "supporting": [
      "exception_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
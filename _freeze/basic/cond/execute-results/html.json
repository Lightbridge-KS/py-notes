{
  "hash": "c9e0654c8e52fea5edd0c0bdb5e58bdb",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Conditional\"\n---\n\n\n\n\n<!-- ```{r setup, include=FALSE}\nlibrary(here)\nhere::i_am(\"basic/cond.qmd\")\nsource(here(\"_common.R\"))\n``` -->\n\n## IF statement\n\n#### `if` `elif` `else` Structure\n\n::: {#e6004af3 .cell execution_count=1}\n``` {.python .cell-code}\ntemp = 15\n\nif temp > 30:\n  print(\"Too hot\")\nelif temp > 20:\n  print(\"It's about right\")\nelse:\n  print(\"It's cold\")\n  \nprint(\"Bye!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIt's cold\nBye!\n```\n:::\n:::\n\n\n#### Ternary Operator\n\nThis is long\n\n::: {#41307a2e .cell execution_count=2}\n``` {.python .cell-code}\nscore = 4\n\nif score >= 5:\n  msg = \"pass\"\nelse:\n  msg = \"fail\"\n\nprint(msg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfail\n```\n:::\n:::\n\n\nuse **Ternary Operator** instead\n\n```python\nvalue_if_true if condition else value_if_false\n```\n\n::: {#bb490e85 .cell execution_count=3}\n``` {.python .cell-code}\nscore = 7\n\nmsg = \"pass\" if score >= 5 else \"fail\"\nmsg\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'pass'\n```\n:::\n:::\n\n\n#### Logical Operators\n\n`and` `or` `not` they can be short-circuited.\n\n::: {#ca3e1b52 .cell execution_count=4}\n``` {.python .cell-code}\nhigh_income = True\ngood_credit = False\nstudent = False\n\nif (high_income or good_credit) and not student:\n  print(\"eligible\")\nelse:\n  print(\"not eligible\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\neligible\n```\n:::\n:::\n\n\n#### Chaining Comparison Operators\n\n::: {#10a73aaa .cell execution_count=5}\n``` {.python .cell-code}\nage = 23\n\nif 18 < age < 60:\n  print(\"eligible\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\neligible\n```\n:::\n:::\n\n\n## Execute based on argument type\n\n::: {#aad39641 .cell execution_count=6}\n``` {.python .cell-code}\ndef handle_float(x: float) -> None:\n    print(\"x is float\")\n\ndef handle_list(x: list) -> None:\n    print(\"x is list\")\n\ndef num_or_list(x: float | list) -> None:\n    type_handler = {\n        float: handle_float,\n        list: handle_list,\n    }\n    handler = type_handler.get(type(x))\n    if handler:\n        handler(x)\n    else:\n        print(\"Unsupported type\")\n```\n:::\n\n\n::: {#4f97f7c7 .cell execution_count=7}\n``` {.python .cell-code}\nnum_or_list(2.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is float\n```\n:::\n:::\n\n\n::: {#71e8cef9 .cell execution_count=8}\n``` {.python .cell-code}\nnum_or_list([\"x\", \"y\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is list\n```\n:::\n:::\n\n\n",
    "supporting": [
      "cond_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
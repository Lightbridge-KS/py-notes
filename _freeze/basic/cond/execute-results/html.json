{
  "hash": "e924f3ae2758072cf79fa79e7ce8c331",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Conditional\"\n---\n\n<!-- ```{r setup, include=FALSE}\nlibrary(here)\nhere::i_am(\"basic/cond.qmd\")\nsource(here(\"_common.R\"))\n``` -->\n\n## IF statement\n\n#### `if` `elif` `else` Structure\n\n::: {#0e3d6e27 .cell execution_count=1}\n``` {.python .cell-code}\ntemp = 15\n\nif temp > 30:\n  print(\"Too hot\")\nelif temp > 20:\n  print(\"It's about right\")\nelse:\n  print(\"It's cold\")\n  \nprint(\"Bye!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIt's cold\nBye!\n```\n:::\n:::\n\n\n#### Ternary Operator\n\nThis is long\n\n::: {#8080453f .cell execution_count=2}\n``` {.python .cell-code}\nscore = 4\n\nif score >= 5:\n  msg = \"pass\"\nelse:\n  msg = \"fail\"\n\nprint(msg)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfail\n```\n:::\n:::\n\n\nuse **Ternary Operator** instead\n\n```python\nvalue_if_true if condition else value_if_false\n```\n\n::: {#8a319360 .cell execution_count=3}\n``` {.python .cell-code}\nscore = 7\n\nmsg = \"pass\" if score >= 5 else \"fail\"\nmsg\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n'pass'\n```\n:::\n:::\n\n\n#### Logical Operators\n\n`and` `or` `not` they can be short-circuited.\n\n::: {#9d755585 .cell execution_count=4}\n``` {.python .cell-code}\nhigh_income = True\ngood_credit = False\nstudent = False\n\nif (high_income or good_credit) and not student:\n  print(\"eligible\")\nelse:\n  print(\"not eligible\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\neligible\n```\n:::\n:::\n\n\n#### Chaining Comparison Operators\n\n::: {#87bc9deb .cell execution_count=5}\n``` {.python .cell-code}\nage = 23\n\nif 18 < age < 60:\n  print(\"eligible\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\neligible\n```\n:::\n:::\n\n\n## `match` statement (Pattern matching)\n\nImplemented in Python 3.10\n\n### Simple\n\n::: {#4c4259ed .cell execution_count=6}\n``` {.python .cell-code}\ndef http_error(status):\n    match status:\n        case 400:\n            return \"Bad request\"\n        case 404:\n            return \"Not found\"\n        case 418:\n            return \"I'm a teapot\"\n        case _:\n            return \"Something's wrong with the internet\"\n```\n:::\n\n\n::: {#ab8d8537 .cell execution_count=7}\n``` {.python .cell-code}\nhttp_error(400)\nhttp_error(418)\nhttp_error(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n\"Something's wrong with the internet\"\n```\n:::\n:::\n\n\n### Combined\n\n::: {#d7b696e6 .cell execution_count=8}\n``` {.python .cell-code}\ndef http_error2(status):\n    match status:\n        case 400:\n            return \"Bad request\"\n        case 401 | 403 | 404: #  combine \n            return \"Not allowed\"\n        case _:\n            return \"Something's wrong with the internet\"\n```\n:::\n\n\n::: {#b3d95f11 .cell execution_count=9}\n``` {.python .cell-code}\nhttp_error2(401)\nhttp_error2(403)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'Not allowed'\n```\n:::\n:::\n\n\n::: {#dec2b446 .cell execution_count=10}\n``` {.python .cell-code}\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef where_is(point):\n    match point:\n        case Point(x=0, y=0):\n            print(\"Origin\")\n        case Point(x=0, y=y):\n            print(f\"Y={y}\")\n        case Point(x=x, y=0):\n            print(f\"X={x}\")\n        case Point():\n            print(\"Somewhere else\")\n        case _:\n            print(\"Not a point\")\n```\n:::\n\n\n::: {#47613cb4 .cell execution_count=11}\n``` {.python .cell-code}\np0 = Point(0, 0)\nwhere_is(p0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOrigin\n```\n:::\n:::\n\n\n::: {#f0c1b76f .cell execution_count=12}\n``` {.python .cell-code}\np1 = Point(1, 1)\nwhere_is(p1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSomewhere else\n```\n:::\n:::\n\n\n### Match By length\n\n::: {#6a9a12a3 .cell execution_count=13}\n``` {.python .cell-code}\ntoday_responses = [200, 300, 404, 500]\nmatch today_responses:\n    case [a]:\n            print(f\"One response today: {a}\")\n    case [a, b]:\n            print(f\"Two responses today: {a} and {b}\")\n    case [a, b, *rest]:\n            print(f\"All responses: {a}, {b}, {rest}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAll responses: 200, 300, [404, 500]\n```\n:::\n:::\n\n\n### Using `__match_args__`\n\n::: {#bad08a7e .cell execution_count=14}\n``` {.python .cell-code}\nclass Point:\n    __match_args__ = ('x', 'y')\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n# Suppose you have an instance of Point\npoint = Point(1, 2)\n```\n:::\n\n\nYou can use pattern matching to destructure the point:\n\n::: {#537c630f .cell execution_count=15}\n``` {.python .cell-code}\nmatch point:\n    case Point(x, y):\n        print(f\"The point is at ({x}, {y}).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe point is at (1, 2).\n```\n:::\n:::\n\n\nIs equivalent to:\n\n::: {#0d468326 .cell execution_count=16}\n``` {.python .cell-code}\nif isinstance(point, Point):\n  print(f\"The point is at ({point.x}, {point.y}).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe point is at (1, 2).\n```\n:::\n:::\n\n\nIn this example, the match statement checks if point is an instance of Point and then automatically unpacks its x and y attributes according to the order specified in `__match_args__`.\n\n\n## Execute based on argument type\n\n::: {#c2cfb0e5 .cell execution_count=17}\n``` {.python .cell-code}\ndef handle_float(x: float) -> None:\n    print(\"x is float\")\n\ndef handle_list(x: list) -> None:\n    print(\"x is list\")\n\ndef num_or_list(x: float | list) -> None:\n    type_handler = {\n        float: handle_float,\n        list: handle_list,\n    }\n    handler = type_handler.get(type(x))\n    if handler:\n        handler(x)\n    else:\n        print(\"Unsupported type\")\n```\n:::\n\n\n::: {#c4916a0b .cell execution_count=18}\n``` {.python .cell-code}\nnum_or_list(2.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is float\n```\n:::\n:::\n\n\n::: {#38d610e1 .cell execution_count=19}\n``` {.python .cell-code}\nnum_or_list([\"x\", \"y\"])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx is list\n```\n:::\n:::\n\n\n",
    "supporting": [
      "cond_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
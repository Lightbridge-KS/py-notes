{
  "hash": "40450a4713372414d8c354e6e26d8514",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: JSON\n---\n\n\n\n\n**Basic Operations in the `json` Module**\n\n1. **Serialization**: Converting a Python object (e.g., dictionary, list, etc.) into a JSON string.\n2. **Deserialization**: Converting a JSON string into a Python object (e.g., dictionary, list, etc.).\n\n::: {#eebb6c88 .cell execution_count=1}\n``` {.python .cell-code}\nimport json\n```\n:::\n\n\n## Serialization (Convert Python -> JSON)\n\n### `json.dumps()`\n\nThis function is used to convert (serialize) a Python object into a JSON-formatted string.\n\n::: {#459b4ec0 .cell execution_count=2}\n``` {.python .cell-code}\nimport json\n\n# Python dictionary\nperson = {\n    \"name\": \"Alice\",\n    \"age\": 30,\n    \"city\": \"New York\",\n    \"is_employee\": True\n}\n\n# Convert Python object to JSON string\njson_string = json.dumps(person)\nprint(json_string)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\", \"is_employee\": true}\n```\n:::\n:::\n\n\n- **`dumps()`** converts the Python object to a **JSON string**.\n- Python data types like `dict`, `list`, `int`, `str`, and `bool` are automatically converted to corresponding JSON types.\n  - `True` becomes `true` (in JSON format).\n  - Strings are enclosed in double quotes in JSON.\n\n---\n\nTo save the JSON string to a file, use the `json.dump()` function. This function writes the JSON representation directly to a file.\n\n```python\nwith open('person.json', 'w') as file:\n    json.dump(person, file)\n```\n\n## Deserialization (JSON -> Python Object)\n\n### `json.loads()`\n\nThis function is used to parse (deserialize) a JSON-formatted string into a Python object.\n\n::: {#fe60158f .cell execution_count=3}\n``` {.python .cell-code}\nimport json\n\n# JSON string\njson_string = '{\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\", \"is_employee\": true}'\n\n# Convert JSON string to Python object (dictionary)\nperson_dict = json.loads(json_string)\nprint(person_dict)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'name': 'Alice', 'age': 30, 'city': 'New York', 'is_employee': True}\n```\n:::\n:::\n\n\n- **`loads()`** converts a **JSON string** to a corresponding Python object.\n  - `true` in JSON becomes `True` in Python.\n  - JSON strings are converted to Python dictionaries.\n\n\nTo read JSON data from a file and convert it into a Python object, use the `json.load()` function.\n\n```python\nwith open('person.json', 'r') as file:\n    person_dict = json.load(file)\n\nprint(person_dict)\n```\n\n### Summary:\n\n- **`json.dumps()`** converts a Python object to a JSON string.\n- **`json.loads()`** converts a JSON string back to a Python object.\n- **`json.dump()`** writes a Python object as JSON data to a file.\n- **`json.load()`** reads JSON data from a file and converts it back to a Python object.\n\nThe `json` module makes it easy to work with JSON data, whether you are reading from or writing to files, or converting between Python objects and JSON strings.\n\n",
    "supporting": [
      "json_files"
    ],
    "filters": [],
    "includes": {}
  }
}
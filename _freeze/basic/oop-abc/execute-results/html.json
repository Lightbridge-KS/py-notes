{
  "hash": "9f3ef0d0eb9036e903969921fcb7528c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Abstract Base Class\"\n---\n\n\n\n\n**Goal:**\n\n- Prevents a user from creating an object of that class\n- compels a user to override abstract methods in a child class\n\n**abstract class** = a class which contains one or more abstract methods.\n**abstract method** = a method that has a declaration but does not have an implementation.\n\n::: {#2f6d0551 .cell execution_count=1}\n``` {.python .cell-code}\nfrom abc import ABC, abstractmethod\n```\n:::\n\n\n::: {#065bbcb7 .cell execution_count=2}\n``` {.python .cell-code}\nclass Vehicle(ABC):\n\n    @abstractmethod\n    def go(self):\n        pass\n\n    @abstractmethod\n    def stop(self):\n        pass\n\nclass Car(Vehicle):\n\n    def go(self):\n        print(\"You drive the car\")\n\n    def stop(self):\n        print(\"This car is stopped\")\n\nclass Motorcycle(Vehicle):\n\n    def go(self):\n        print(\"You ride the motorcycle\")\n\n    def stop(self):\n        print(\"This motorcycle is stopped\")\n```\n:::\n\n\n::: {#ca80ed53 .cell execution_count=3}\n``` {.python .cell-code}\n# Cannot Do\n# vehicle = Vehicle()\n```\n:::\n\n\n```\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[3], line 2\n      1 # Cannot Do\n----> 2 vehicle = Vehicle()\n\nTypeError: Can't instantiate abstract class Vehicle with abstract methods go, stop\n```\n\n::: {#da2a23b2 .cell execution_count=4}\n``` {.python .cell-code}\ncar = Car()\nmotorcycle = Motorcycle()\n\ncar.go()\nmotorcycle.go()\n\n#vehicle.stop()\ncar.stop()\nmotorcycle.stop()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou drive the car\nYou ride the motorcycle\nThis car is stopped\nThis motorcycle is stopped\n```\n:::\n:::\n\n\n",
    "supporting": [
      "oop-abc_files"
    ],
    "filters": [],
    "includes": {}
  }
}
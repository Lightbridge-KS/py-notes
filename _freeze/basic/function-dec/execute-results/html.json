{
  "hash": "84bbd493bc292434e01697b7da6d245e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Decorator\"\n---\n\n::: {#64f3e3c8 .cell execution_count=1}\n``` {.python .cell-code}\nfrom functools import wraps\n```\n:::\n\n\n- [Python Decorator Cheatsheet](https://www.pythoncheatsheet.org/cheatsheet/decorators)\n  \n## Concept\n\n::: {#e435a54a .cell execution_count=2}\n``` {.python .cell-code}\ndef outer_func(msg):\n    def inner_func():\n        print(msg)\n    return inner_func\n```\n:::\n\n\nTraditional function factory\n\n::: {#4153cd4b .cell execution_count=3}\n``` {.python .cell-code}\nmy_func_1 = outer_func(\"hi\")\nmy_func_2 = outer_func(\"bro\")\n\nmy_func_1()\nmy_func_2()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhi\nbro\n```\n:::\n:::\n\n\n## Basic Usage\n\n::: {#ca85c3f4 .cell execution_count=4}\n``` {.python .cell-code}\ndef your_decorator(func):\n  def wrapper():\n    # Do stuff before func...\n    print(\"Before func!\")\n    func()\n    # Do stuff after func...\n    print(\"After func!\")\n  return wrapper\n```\n:::\n\n\n### Decorator\n\n::: {#84fde7a6 .cell execution_count=5}\n``` {.python .cell-code}\n@your_decorator\ndef foo():\n  print(\"Hello World!\")\n\nfoo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBefore func!\nHello World!\nAfter func!\n```\n:::\n:::\n\n\n::: {#2a40f7cd .cell execution_count=6}\n``` {.python .cell-code}\ndel foo # Clean up\n```\n:::\n\n\n### Manually\n\n::: {#580adcb4 .cell execution_count=7}\n``` {.python .cell-code}\ndef foo():\n  print(\"Hello World!\")\n```\n:::\n\n\n::: {#96a7a0da .cell execution_count=8}\n``` {.python .cell-code}\nfoo_dec = your_decorator(foo)\nfoo_dec()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBefore func!\nHello World!\nAfter func!\n```\n:::\n:::\n\n\n## Decorator with Parameters\n\n::: {#8380366f .cell execution_count=9}\n``` {.python .cell-code}\ndef your_decorator(func):\n  def wrapper(*args,**kwargs):\n    # Do stuff before func...\n    print(\"Before func!\") \n    func(*args,**kwargs)\n    # Do stuff after func...\n    print(\"After func!\")\n  return wrapper\n\n@your_decorator\ndef foo(bar):\n  print(\"My name is \" + bar)\n\nfoo(\"Jack\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nBefore func!\nMy name is Jack\nAfter func!\n```\n:::\n:::\n\n\n## Decorator Template\n\n```python\nimport functools\n\ndef your_decorator(func):\n  @functools.wraps(func) # For preserving the metadata of func.\n  def wrapper(*args,**kwargs):\n    # Do stuff before func...\n    result = func(*args,**kwargs)\n    # Do stuff after func..\n    return result\n  return wrapper\n```\n\n",
    "supporting": [
      "function-dec_files"
    ],
    "filters": [],
    "includes": {}
  }
}
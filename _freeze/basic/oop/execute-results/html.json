{
  "hash": "0153f0ea4aeba06613757dac1a042052",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"OOP in Python\"\n---\n\n\n\n\n- [OOP in Python (real python)](https://realpython.com/python3-object-oriented-programming/#what-is-object-oriented-programming-in-python)\n\n\n## Class\n\n### Define Class\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Car:\n    \"Car Class\"\n    # Class Attribute\n    fuel = \"Electric\"\n    # initialize dunder\n    def __init__(self, color: str, mileage: int):\n        self.color = color\n        self.mileage = mileage\n    # Print dunder\n    def __str__(self) -> str:\n        return f\"color: {self.color}, mileage: {self.mileage}\"\n    # Instance method\n    def drive(self):\n        return f\"Ventured {self.mileage} miles\"            \n```\n:::\n\n\n### Create instance\n\nCreate instance of a class `Car`\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncar_blue = Car(\"blue\", 20000)\nprint(car_blue)\n#> color: blue, mileage: 20000\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Doc string\ncar_blue.__doc__\n#> 'Car Class'\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ncar_blue.__dict__\n#> {'color': 'blue', 'mileage': 20000}\n```\n:::\n\n\nAccess Attribute\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncar_turbo.fuel\n#> name 'car_turbo' is not defined\n```\n:::\n\n\nAccess method\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncar_turbo.drive()\n#> name 'car_turbo' is not defined\n```\n:::\n\n\n### Interitance\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Parent:\n    hair_color = \"brown\"\n\nclass Child(Parent):\n    pass\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nch1 = Child()\nch1.hair_color\n#> 'brown'\n```\n:::\n\n\n**Overwrite Parent**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Parent:\n    hair_color = \"brown\"\n\nclass Child(Parent):\n    hair_color = \"purple\" # Overwrite\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nch2 = Child()\nch2.hair_color\n#> 'purple'\n```\n:::\n\n\n**Extend Parent Attribute**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Parent:\n    speaks = [\"English\"]\n\nclass Child(Parent):\n    def __init__(self):\n        super().__init__()\n        self.speaks.append(\"German\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nch3 = Child()\nch3.hair_color\n#> 'Child' object has no attribute 'hair_color'\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Check parent class\ntype(ch3) \n#> <class '__main__.Child'>\nisinstance(ch3, Parent)\n#> True\n```\n:::\n\n\n### Multiple Child from Parent Class\n\n**Parent Class**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    def speak(self, sound=\"...\"):\n        return f\"{self.name} says {sound}\"\n```\n:::\n\n\n**Child Class**\n\nEach dog breed bark differently\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return super().speak(sound)\n\nclass Bulldog(Dog):\n    def speak(self, sound=\"Woof\"):\n        return super().speak(sound)\n\nclass Dachshund(Dog):\n    pass\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmiles = JackRussellTerrier(\"Miles\", 4)\nbuddy = Dachshund(\"Buddy\", 9)\njack = Bulldog(\"Jack\", 3)\njim = Bulldog(\"Jim\", 5)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmiles.speak()\n#> 'Miles says Arf'\nbuddy.speak()\n#> 'Buddy says ...'\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
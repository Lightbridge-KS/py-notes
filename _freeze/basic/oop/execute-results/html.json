{
  "hash": "5bd1d1848a49df915d687ea25e0e9e6f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"OOP in Python\"\n---\n\n\n\n\n\n\n- [OOP in Python (real python)](https://realpython.com/python3-object-oriented-programming/#what-is-object-oriented-programming-in-python)\n\n\n## Class\n\n### Define Class\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Car:\n    \"Car Class\"\n    # Class Attribute\n    fuel = \"Electric\"\n    # initialize dunder\n    def __init__(self, color: str, mileage: int):\n        self.color = color\n        self.mileage = mileage\n    # Print dunder\n    def __str__(self) -> str:\n        return f\"color: {self.color}, mileage: {self.mileage}\"\n    # Instance method\n    def drive(self):\n        return f\"Ventured {self.mileage} miles\"            \n```\n:::\n\n\n\n\n### Create instance\n\nCreate instance of a class `Car`\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncar_blue = Car(\"blue\", 20000)\nprint(car_blue)\n#> color: blue, mileage: 20000\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Doc string\ncar_blue.__doc__\n#> 'Car Class'\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ncar_blue.__dict__\n#> {'color': 'blue', 'mileage': 20000}\n```\n:::\n\n\n\n\nAccess Attribute\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncar_turbo.fuel\n#> NameError: name 'car_turbo' is not defined\n```\n:::\n\n\n\n\nAccess method\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ncar_turbo.drive()\n#> NameError: name 'car_turbo' is not defined\n```\n:::\n\n\n\n\n### Class attribute vs Instance attribute\n\n\n1. **Class Attributes**:\n    - Defined directly in the class body.\n    - Shared across all instances of the class.\n    - Accessed using the class name or through an instance.\n    - Changes to a class attribute affect all instances that havenâ€™t overridden the attribute.\n\nExample:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Manual:\n    A = \"hi\"\n    B = \"there\"\n\n# Accessing class attributes\nprint(Manual.A)  # Output: hi\n#> hi\nprint(Manual.B)  # Output: there\n#> there\n\n# Creating instances\nm1 = Manual()\nm2 = Manual()\n\n# Accessing class attributes through instances\nprint(m1.A)  \n#> hi\nprint(m2.A) \n#> hi\n\n# Modifying class attribute\nManual.A = \"hello\"\nprint(m1.A)  \n#> hello\nprint(m2.A)   \n#> hello\n```\n:::\n\n\n\n\n2. **Instance Attributes**:\n    - Defined within the `__init__` method.\n    - Unique to each instance of the class.\n    - Accessed using the instance name.\n    - Changes to an instance attribute affect only that instance.\n\nExample:\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Manual:\n    def __init__(self):\n        self.A = \"hi\"\n        self.B = \"there\"\n\n# Creating instances\nm1 = Manual()\nm2 = Manual()\n\n# Accessing instance attributes\nprint(m1.A)  \n#> hi\nprint(m2.A)  \n#> hi\n\n# Modifying instance attribute\nm1.A = \"hello\"\nprint(m1.A)  \n#> hello\nprint(m2.A)  \n#> hi\n```\n:::\n\n\n\n\n#### Key Differences\n\n1. **Scope and Sharing**:\n    - **Class Attributes**: Shared by all instances of the class. If you change a class attribute, the change is reflected in all instances unless overridden.\n    - **Instance Attributes**: Unique to each instance. Changing an instance attribute affects only that particular instance.\n\n2. **Definition and Initialization**:\n    - **Class Attributes**: Defined directly in the class body, outside any methods.\n    - **Instance Attributes**: Defined within the `__init__` method, which is called when a new instance of the class is created.\n\n3. **Usage Context**:\n    - **Class Attributes**: Useful for constants or attributes that should be shared across all instances.\n    - **Instance Attributes**: Used for attributes that need to be unique to each instance, such as data specific to that instance.\n\n#### Summary\n\n- Use **class attributes** when you want to share data across all instances of the class.\n- Use **instance attributes** when you need each instance of the class to have its own unique data.\n\n### Interitance\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Parent:\n    hair_color = \"brown\"\n\nclass Child(Parent):\n    pass\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nch1 = Child()\nch1.hair_color\n#> 'brown'\n```\n:::\n\n\n\n\n**Overwrite Parent**\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Parent:\n    hair_color = \"brown\"\n\nclass Child(Parent):\n    hair_color = \"purple\" # Overwrite\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nch2 = Child()\nch2.hair_color\n#> 'purple'\n```\n:::\n\n\n\n\n**Extend Parent Attribute**\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Parent:\n    speaks = [\"English\"]\n\nclass Child(Parent):\n    def __init__(self):\n        super().__init__()\n        self.speaks.append(\"German\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nch3 = Child()\nch3.hair_color\n#> AttributeError: 'Child' object has no attribute 'hair_color'\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Check parent class\ntype(ch3) \n#> <class '__main__.Child'>\nisinstance(ch3, Parent)\n#> True\n```\n:::\n\n\n\n\n### Multiple Child from Parent Class\n\n**Parent Class**\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Dog:\n    species = \"Canis familiaris\"\n\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def __str__(self):\n        return f\"{self.name} is {self.age} years old\"\n\n    def speak(self, sound=\"...\"):\n        return f\"{self.name} says {sound}\"\n```\n:::\n\n\n\n\n**Child Class**\n\nEach dog breed bark differently\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass JackRussellTerrier(Dog):\n    def speak(self, sound=\"Arf\"):\n        return super().speak(sound)\n\nclass Bulldog(Dog):\n    def speak(self, sound=\"Woof\"):\n        return super().speak(sound)\n\nclass Dachshund(Dog):\n    pass\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmiles = JackRussellTerrier(\"Miles\", 4)\nbuddy = Dachshund(\"Buddy\", 9)\njack = Bulldog(\"Jack\", 3)\njim = Bulldog(\"Jim\", 5)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nmiles.speak()\n#> 'Miles says Arf'\nbuddy.speak()\n#> 'Buddy says ...'\n```\n:::\n\n\n\n\n## Class Method (Dunder)\n\n### String Representation `__repr__`, `__str__`\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Pair:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return 'Pair({0.x!r}, {0.y!r})'.format(self) \n    def __str__(self):\n        return '({0.x!s}, {0.y!s})'.format(self)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\np = Pair(3, 4)\np\n#> Pair(3, 4)\n```\n:::\n\n\n\n\nthe special !r formatting code indicates that the output of `__repr__()` should be used\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprint('p is {0!r}'.format(p)) \n#> p is Pair(3, 4)\nprint('p is {0}'.format(p))\n#> p is (3, 4)\n```\n:::\n\n\n\n\n### String Formatting `__format__()`\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n_formats = {\n        'ymd' : '{d.year}-{d.month}-{d.day}',\n        'mdy' : '{d.month}/{d.day}/{d.year}',\n        'dmy' : '{d.day}/{d.month}/{d.year}'\n        }\n\nclass Date:\n    def __init__(self, year, month, day):\n                self.year = year\n                self.month = month\n                self.day = day\n    def __format__(self, code): \n        if code == '':\n            code = 'ymd'    \n        fmt = _formats[code] \n        return fmt.format(d=self)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nd = Date(2012, 12, 21)\nformat(d)\n#> '2012-12-21'\nformat(d, 'mdy')\n#> '12/21/2012'\n'The date is {:ymd}'.format(d)\n#> 'The date is 2012-12-21'\n```\n:::\n\n\n\n\n### Setter / Getter\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nclass Person:\n    def __init__(self, first_name):\n        self.first_name = first_name\n    # Getter function\n    @property\n    def first_name(self): \n        return self._first_name\n    # Setter function\n    @first_name.setter\n    def first_name(self, value):\n        if not isinstance(value, str):\n            raise TypeError('Expected a string') \n        self._first_name = value\n    # Deleter function (optional)\n    @first_name.deleter\n    def first_name(self):\n        raise AttributeError(\"Can't delete attribute\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\na = Person('Guido')\na.first_name\n#> 'Guido'\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\na.first_name = 42\n#> TypeError: Expected a string\n```\n:::\n",
    "supporting": [
      "oop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
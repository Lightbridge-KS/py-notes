{
  "hash": "7f6a639dc60d4237ee2b6e64386b685b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"For Loop Alternative\"\n---\n\n\n\n\n\n\n\n## Comprehension\n\n```python\n[expression for item in iterable if condition]\n```\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnumbers = [1, 2, 3, 4, 5]\n[n ** 2 for n in numbers if n % 2 == 0] \n#> [4, 16]\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nls = [\"a\", \"b\", \"c\"]\n\n# Equivalent\n[x.upper() for x in ls]\n#> ['A', 'B', 'C']\n[str.upper(x) for x in ls]\n#> ['A', 'B', 'C']\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ndd = {\"a\": \"aa\", \"b\": \"bb\"}\n\n{k: v for k, v in dd.items()} # Dict\n#> {'a': 'aa', 'b': 'bb'}\n[k for k in dd.keys()] # Keys\n#> ['a', 'b']\n[v for v in dd.values()] # Values\n#> ['aa', 'bb']\n```\n:::\n\n\n\n\nUsing `_` varible\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nd = [1, 2]\nl = [list(d) for _ in d]\nl\n#> [[1, 2], [1, 2]]\n```\n:::\n\n\n\n\n## `map()` Function\n\n`map(function, iterable)`\n\n`map()` applies a function to all the items in an input list. It returns a map object (an iterator) of the results after applying the given function to each item of the given iterable (list, tuple etc.).\n\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nnumbers = [1, 2, 3, 4, 5]\nsquares = map(lambda x: x**2, numbers)  \nlist(squares)  # Converting the map object to a list\n#> [1, 4, 9, 16, 25]\n```\n:::\n\n\n\n\n## Differences and When to Use\n\n- **Readability**: List comprehensions are often more readable and succinct, especially for simple operations or when filtering conditions are involved.\n- **Performance**: Both list comprehensions and `map()` are faster than a for loop. However, for very large data sets, `map()` can be more memory-efficient (since it returns an iterator), but the difference is often negligible.\n- **Function Application**: If you're applying an existing function (especially a more complex one), `map()` can be more convenient. For operations that can be expressed as a single expression, or where you need conditional logic (like filtering), a list comprehension is often the better choice.\n- **Return Type**: `map()` returns a map object (iterator), which you often need to convert back to a list or another iterable type. List comprehensions return a list directly.\n\nIn summary, use list comprehensions when you need a readable and concise way to generate a new list by applying an expression to each item in an iterable, possibly with filtering. Use `map()` when you need to apply an already-defined function to each item in an iterable and are okay with receiving an iterator as the result.",
    "supporting": [
      "loop-alt_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "5f54f131dd1cec9901408a3ea7fc3655",
  "result": {
    "markdown": "---\ntitle: \"Intro to PD\"\n---\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nfrom pandas import Series, DataFrame\n```\n:::\n\n\n## Series\n\n### Creation\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nobj = pd.Series([4, 7, -5, 3])\ntype(obj)\nobj\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n0    4\n1    7\n2   -5\n3    3\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Array Representation\nobj.array\ntype(obj.array)\n\n# Index\nobj.index\ntype(obj.index)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\npandas.core.indexes.range.RangeIndex\n```\n:::\n:::\n\n\nSeries with index\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nobj2 = pd.Series([4, 7, -5, 3], index=[\"d\", \"b\", \"a\", \"c\"])\nobj2\n\n# Index\nobj2.index\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nIndex(['d', 'b', 'a', 'c'], dtype='object')\n```\n:::\n:::\n\n\nFrom `Dict`\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nsdata = {\"Ohio\": 35000, \"Texas\": 71000, \"Oregon\": 16000, \"Utah\": 5000}\nobj3 = pd.Series(sdata)\nobj3\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nOhio      35000\nTexas     71000\nOregon    16000\nUtah       5000\ndtype: int64\n```\n:::\n:::\n\n\nBack to `Dict`, `List`, etc.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nobj3.to_dict()\nobj3.to_list()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n[35000, 71000, 16000, 5000]\n```\n:::\n:::\n\n\n### Subset Series\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Position\nobj2[0] \n\n# Index\nobj2[\"d\"]\n\n# list of indices\nobj2[[\"d\", \"a\"]]\n\n# Logical\nobj2[obj2 > 0]\n\n# Assign\nobj2[\"c\"] = 10\nobj2\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/ry/z9m8k9cs4594pv3458npy1zw0000gn/T/ipykernel_42358/748481342.py:2: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  obj2[0]\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nd     4\nb     7\na    -5\nc    10\ndtype: int64\n```\n:::\n:::\n\n\n### Vectorized Operation\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nobj2 * 2\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nd     8\nb    14\na   -10\nc    20\ndtype: int64\n```\n:::\n:::\n\n\n Series is as a fixed-length, ordered dictionary\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n\"b\" in obj2\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\n### Missing Value\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nx = pd.Series([1, 2, None])\nx\n# Check NA\nx.isna()\nx.notna()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n0     True\n1     True\n2    False\ndtype: bool\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pd_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "08662d745d341e618518ed2d1aef4aaf",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Try-fails-NA\n---\n\n\n\n\n## Try, fails -> return missing\n\nTry do something, if fails, return missing value, and log the warning message. No error is thrown. \n\n\n### Use `warnings.warn`\n\n::: {#d9be3bcc .cell execution_count=1}\n``` {.python .cell-code}\nimport warnings\n\n\ndef complex_fn(data):\n    \"\"\"\n    A function to extract data with error handling.\n    If data extraction fails, returns a missing value (\"\") and logs a warning.\n    \"\"\"\n    try:\n        # Simulate data extraction logic\n        extracted_value = data.get(\"key\")  # Example: Extract value for \"key\"\n        if extracted_value is None:\n            raise ValueError(\"Key not found in data.\")\n        return extracted_value\n    except Exception as e:\n        # Log the warning and return missing value\n        warnings.warn(f\"Data extraction failed: {e}\")\n        return \"\"\n```\n:::\n\n\n::: {#25b77595 .cell execution_count=2}\n``` {.python .cell-code}\ndata = {\"key\": \"value\"}\nprint(complex_fn(data))  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvalue\n```\n:::\n:::\n\n\n::: {#34e70955 .cell execution_count=3}\n``` {.python .cell-code}\ndata_missing = {\"another_key\": \"value\"}\nprint(complex_fn(data_missing)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/var/folders/70/7wmmf6t55cb84bfx9g1c1k1m0000gn/T/ipykernel_90414/2471619121.py:17: UserWarning: Data extraction failed: Key not found in data.\n  warnings.warn(f\"Data extraction failed: {e}\")\n```\n:::\n:::\n\n\n### Use `logging`\n\n::: {#b9bc4acb .cell execution_count=4}\n``` {.python .cell-code}\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.WARNING, format=\"%(asctime)s - %(levelname)s - %(message)s\")\n\ndef complex_fn(data):\n    \"\"\"\n    A function to extract data with error handling.\n    If data extraction fails, returns a missing value (\"\") and logs a warning.\n    \"\"\"\n    try:\n        # Simulate data extraction logic\n        extracted_value = data.get(\"key\")  # Example: Extract value for \"key\"\n        if extracted_value is None:\n            raise ValueError(\"Key not found in data.\")\n        return extracted_value\n    except Exception as e:\n        # Log the warning and return missing value\n        logging.warning(f\"Data extraction failed: {e}\")\n        return \"\"\n```\n:::\n\n\n::: {#77251ca6 .cell execution_count=5}\n``` {.python .cell-code}\ndata = {\"key\": \"value\"}\nprint(complex_fn(data))  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nvalue\n```\n:::\n:::\n\n\n::: {#3ed3e4cd .cell execution_count=6}\n``` {.python .cell-code}\ndata_missing = {\"another_key\": \"value\"}\nprint(complex_fn(data_missing)) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2025-02-12 14:12:30,949 - WARNING - Data extraction failed: Key not found in data.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n:::\n\n\n",
    "supporting": [
      "try-else-na_files"
    ],
    "filters": [],
    "includes": {}
  }
}
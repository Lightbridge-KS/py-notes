{
  "hash": "b3ecabd6bde28d0471394941af09457a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Abstract Base Class\"\n---\n\n\n\n\n## ABC \n\n**Goal:**\n\n- Prevents a user from creating an object of that class\n- compels a user to override abstract methods in a child class\n\n**abstract class** = a class which contains one or more abstract methods.\n**abstract method** = a method that has a declaration but does not have an implementation.\n\n::: {#604c891a .cell execution_count=1}\n``` {.python .cell-code}\nfrom abc import ABC, abstractmethod\n```\n:::\n\n\n::: {#e94c3fdc .cell execution_count=2}\n``` {.python .cell-code}\nclass Vehicle(ABC):\n\n    @abstractmethod\n    def go(self):\n        pass\n\n    @abstractmethod\n    def stop(self):\n        pass\n\nclass Car(Vehicle):\n\n    def go(self):\n        print(\"You drive the car\")\n\n    def stop(self):\n        print(\"This car is stopped\")\n\nclass Motorcycle(Vehicle):\n\n    def go(self):\n        print(\"You ride the motorcycle\")\n\n    def stop(self):\n        print(\"This motorcycle is stopped\")\n```\n:::\n\n\n::: {#c9a59d03 .cell execution_count=3}\n``` {.python .cell-code}\n# Cannot Do\n# vehicle = Vehicle()\n```\n:::\n\n\n```\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[3], line 2\n      1 # Cannot Do\n----> 2 vehicle = Vehicle()\n\nTypeError: Can't instantiate abstract class Vehicle with abstract methods go, stop\n```\n\n::: {#068aff7f .cell execution_count=4}\n``` {.python .cell-code}\ncar = Car()\nmotorcycle = Motorcycle()\n\ncar.go()\nmotorcycle.go()\n\n#vehicle.stop()\ncar.stop()\nmotorcycle.stop()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYou drive the car\nYou ride the motorcycle\nThis car is stopped\nThis motorcycle is stopped\n```\n:::\n:::\n\n\n## ABC with Data Class\n\n::: {#6009db5b .cell execution_count=5}\n``` {.python .cell-code}\nfrom abc import ABC, abstractmethod\nfrom dataclasses import dataclass\n\n@dataclass\nclass Shape(ABC):\n    name: str  # Field automatically added by @dataclass\n\n    @abstractmethod\n    def area(self) -> float:\n        pass\n\n    @abstractmethod\n    def perimeter(self) -> float:\n        pass\n\n# Subclass that implements the abstract methods\n@dataclass\nclass Rectangle(Shape):\n    width: float\n    height: float\n\n    def area(self) -> float:\n        return self.width * self.height\n\n    def perimeter(self) -> float:\n        return 2 * (self.width + self.height)\n\n# Subclass that implements the abstract methods\n@dataclass\nclass Circle(Shape):\n    radius: float\n\n    def area(self) -> float:\n        return 3.14159 * self.radius ** 2\n\n    def perimeter(self) -> float:\n        return 2 * 3.14159 * self.radius\n```\n:::\n\n\n::: {#f2827efc .cell execution_count=6}\n``` {.python .cell-code}\n# Now you can instantiate the subclasses\nrect = Rectangle(name=\"My Rectangle\", width=10, height=5)\ncircle = Circle(name=\"My Circle\", radius=7)\n\nprint(f\"{rect.name} Area: {rect.area()}\")        # Output: My Rectangle Area: 50\nprint(f\"{rect.name} Perimeter: {rect.perimeter()}\") # Output: My Rectangle Perimeter: 30\n\nprint(f\"{circle.name} Area: {circle.area()}\")      # Output: My Circle Area: 153.93791\nprint(f\"{circle.name} Perimeter: {circle.perimeter()}\") # Output: My Circle Perimeter: 43.98226\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMy Rectangle Area: 50\nMy Rectangle Perimeter: 30\nMy Circle Area: 153.93791\nMy Circle Perimeter: 43.98226\n```\n:::\n:::\n\n\n",
    "supporting": [
      "oop-abc_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "27ef3ae1b292354453d09e7768b6ae73",
  "result": {
    "engine": "jupyter",
    "markdown": "# Logging (Advanced)\n\n## Logging to Multiple Destination\n\nTo verbosely log everything into a log file, while duplicating only the more interesting messages onto the console:\n\n::: {#a77066c4 .cell execution_count=1}\n``` {.python .cell-code}\nimport logging\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\nfmt = logging.Formatter(\"%(asctime)s - %(levelname)s - %(message)s\")\n\n# Warnings and higher only on the console.\nconsole_handler = logging.StreamHandler()\nconsole_handler.setLevel(logging.WARNING)\nlogger.addHandler(console_handler)\nconsole_handler.setFormatter(fmt)\n\n\n# But allow everything to go into the log file.\nlogfile_handler = logging.FileHandler(\"mylog.log\")\nlogger.addHandler(logfile_handler)\nlogfile_handler.setFormatter(fmt)\n\nlogger.warning(\"This goes to both the console, AND into log.txt.\")\nlogger.debug(\"While this only goes to the file.\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n2025-05-11 22:28:02,049 - WARNING - This goes to both the console, AND into log.txt.\n```\n:::\n:::\n\n\n## Logging in Package\n\nFor example, in `__init__.py` or a new `logging.py` file for package `radreportparser`\n\n::: {#930d5272 .cell execution_count=2}\n``` {.python .cell-code}\nimport logging\nimport sys\n\ndef _setup_default_logger():\n    \"\"\"Set up the default logger for radreportparser.\n    \n    This creates a default configuration that:\n    1. Shows warnings and above to stderr\n    2. Uses a simple format that's easy to read\n    3. Only configures logging for this package, not the root logger\n    \n    Users can still override this configuration by:\n    1. Getting the logger with logging.getLogger('radreportparser')\n    2. Removing the default handler with logger.removeHandler()\n    3. Adding their own handlers and configuration\n    \"\"\"\n    logger = logging.getLogger(\"radreportparser\")\n    \n    # Only add handler if none exist (avoid duplicate handlers)\n    if not logger.handlers:\n        # Create default handler\n        handler = logging.StreamHandler(sys.stderr)\n        handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s [%(name)s] - %(message)s'))\n        \n        # Add handler and set level\n        logger.addHandler(handler)\n        logger.setLevel(logging.WARNING)\n    \n    return logger\n\n# Create and configure the default logger\nlogger = _setup_default_logger()\n```\n:::\n\n\nUse by `logger.warning()` etc.\n\n",
    "supporting": [
      "logging-advanced_files"
    ],
    "filters": [],
    "includes": {}
  }
}
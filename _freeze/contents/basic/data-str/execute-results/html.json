{
  "hash": "a765ade94c78f35e9cab110b515faaca",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Data Structure\"\n---\n\n\n\n\n<!-- ```{r setup, include=FALSE}\nlibrary(here)\nhere::i_am(\"basic/data-str.qmd\")\nsource(here(\"_common.R\"))\n``` -->\n\n## Dict\n\n### Create dict from sequence\n\nHow can I create dict from two list with keys from the first list and values from the secound?\n\nTraditional\n\n```python\nmapping = {}\nfor key, value in zip(key_list, value_list):\n    mapping[key] = value\n```\n\nBetter way:\n\n#### Using the `dict` Constructor\n\n::: {#c9746b47 .cell execution_count=1}\n``` {.python .cell-code}\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\n\n# Create the dictionary using the dict constructor and zip\nresult_dict = dict(zip(keys, values))\nresult_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n{'a': 1, 'b': 2, 'c': 3}\n```\n:::\n:::\n\n\n#### Using a Dictionary Comprehension\n\n::: {#a20be423 .cell execution_count=2}\n``` {.python .cell-code}\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\n\n# Create the dictionary using a dictionary comprehension\nresult_dict = {key: value for key, value in zip(keys, values)}\nresult_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n{'a': 1, 'b': 2, 'c': 3}\n```\n:::\n:::\n\n\n#### Handling Unequal Length Lists\n\n::: {#d69b0796 .cell execution_count=3}\n``` {.python .cell-code}\nfrom itertools import zip_longest\n\nkeys = ['a', 'b', 'c']\nvalues = [1, 2]\n\n# Create the dictionary using zip_longest to handle unequal lengths\nresult_dict = {key: value for key, value in zip_longest(keys, values)}\nresult_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n{'a': 1, 'b': 2, 'c': None}\n```\n:::\n:::\n\n\n## List \n\n### List of List is not a list\n\n::: {#b4a9c278 .cell execution_count=4}\n``` {.python .cell-code}\na = [1, 2, 3]\nc = list(a)\n\na == c\na is c\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nFalse\n```\n:::\n:::\n\n\nSince the list function always creates a new Python list (i.e., a copy)\n\n### Append Two List\n\n::: {#cdaa8af3 .cell execution_count=5}\n``` {.python .cell-code}\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n```\n:::\n\n\n#### Using the `+` Operator\n\n::: {#fd9cc123 .cell execution_count=6}\n``` {.python .cell-code}\ncombined_list = list1 + list2\ncombined_list\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n[1, 2, 3, 4, 5, 6]\n```\n:::\n:::\n\n\n#### Using the `extend()` Method\n\n::: {#deee1d73 .cell execution_count=7}\n``` {.python .cell-code}\nlist1.extend(list2)\nlist1\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n[1, 2, 3, 4, 5, 6]\n```\n:::\n:::\n\n\n#### Using the `*` Operator (Python 3.5+)\n\n::: {#62fbadb2 .cell execution_count=8}\n``` {.python .cell-code}\ncombined_list = [*list1, *list2, 7]\ncombined_list\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n[1, 2, 3, 4, 5, 6, 4, 5, 6, 7]\n```\n:::\n:::\n\n\n#### Using a List Comprehension\n\n::: {#26601037 .cell execution_count=9}\n``` {.python .cell-code}\ncombined_list = [item for sublist in (list1, list2) for item in sublist]\ncombined_list\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n[1, 2, 3, 4, 5, 6, 4, 5, 6]\n```\n:::\n:::\n\n\n#### Using the `itertools.chain()` Function\n\n::: {#1a883e81 .cell execution_count=10}\n``` {.python .cell-code}\nimport itertools\n\ncombined_list = list(itertools.chain(list1, list2))\ncombined_list\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n[1, 2, 3, 4, 5, 6, 4, 5, 6]\n```\n:::\n:::\n\n\n### How to unnest list\n\nInput: `[[\"a\"], [\"b\", \"c\"], [\"d\"]]`\n\nDesired output: `[\"a\", \"b\", \"c\", \"d\"]`\n\n#### Using List Comprehension\n\n::: {#3a840ebc .cell execution_count=11}\n``` {.python .cell-code}\nnested_list =[[\"a\"], [\"b\", \"c\"], [\"d\"]]\nflattened_list = [item for sublist in nested_list for item in sublist]\nflattened_list\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n['a', 'b', 'c', 'd']\n```\n:::\n:::\n\n\n#### Using `itertools.chain`\n\nThis is particularly useful for larger datasets:\n\n::: {#fb231bb5 .cell execution_count=12}\n``` {.python .cell-code}\nimport itertools\n\nnested_list = [[\"a\"], [\"b\", \"c\"], [\"d\"]]\nflattened_list = list(itertools.chain(*nested_list))\nflattened_list\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n['a', 'b', 'c', 'd']\n```\n:::\n:::\n\n\n#### Using `sum()` with an Empty List\n\nmay not be as efficient for very large lists:\n\n::: {#239c7607 .cell execution_count=13}\n``` {.python .cell-code}\nnested_list = [[\"a\"], [\"b\", \"c\"], [\"d\"]]\nflattened_list = sum(nested_list, [])\nflattened_list\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n['a', 'b', 'c', 'd']\n```\n:::\n:::\n\n\n## Sets\n\n::: {#72bcf8d9 .cell execution_count=14}\n``` {.python .cell-code}\na = {'a', 'b', 'c' }\nb = {'c', 'd'}\n\nprint(a | b)\n\nprint(a & b)\n\nprint(a - b)\n\nprint(a ^ b) # Symmetric difference \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{'c', 'b', 'd', 'a'}\n{'c'}\n{'b', 'a'}\n{'b', 'd', 'a'}\n```\n:::\n:::\n\n\n## Operation\n\n### Slicing\n\n::: {#bc242154 .cell execution_count=15}\n``` {.python .cell-code}\na = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\na[2:5]     # [2, 3, 4]\na[:3]      # [0, 1, 2]\na[-3:]     # [7, 8, 9]\na[::2]     # [0, 2, 4, 6, 8 ]\na[::-2]    # [9, 7, 5, 3, 1 ]\na[0:5:2]   # [0, 2]\na[5:0:-2]  # [5, 3, 1]\na[:5:1]    # [0, 1, 2, 3, 4]\na[:5:-1]   # [9, 8, 7, 6]\na[5::1]    # [5, 6, 7, 8, 9]\na[5::-1]   # [5, 4, 3, 2, 1, 0]\na[5:0:-1]  # [5, 4, 3, 2, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n[5, 4, 3, 2, 1]\n```\n:::\n:::\n\n\n### Slice Naming\n\n::: {#f02d9bdc .cell execution_count=16}\n``` {.python .cell-code}\nfirstfive = slice(0, 5)\ns = 'hello world'\n\nfirstfive\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nslice(0, 5, None)\n```\n:::\n:::\n\n\n::: {#81f1ccdd .cell execution_count=17}\n``` {.python .cell-code}\nprint(s[firstfive])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhello\n```\n:::\n:::\n\n\n",
    "supporting": [
      "data-str_files"
    ],
    "filters": [],
    "includes": {}
  }
}
{
  "hash": "14e5199de82f5cdc66f4963157466c49",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"OOP Tricks\"\n---\n\n\n\n\n\n## Avoiding Inheritance via Composition\n\n\n::: {.panel-tabset}\n#### Bad\n\n::: {#cf84a4e1 .cell execution_count=1}\n``` {.python .cell-code}\nclass Stack(list):\n    def push(self, item):\n        self.append(item)\n```\n:::\n\n\n#### Good (Composition)\n\n::: {#50f00b63 .cell execution_count=2}\n``` {.python .cell-code}\nclass Stack:\n    def __init__(self, *, container=None):\n        if container is None:\n            container = list()\n        self._items = container\n\n    def push(self, item):\n        self._items.append(item)\n\n    def pop(self):\n        return self._items.pop()\n\n    def __len__(self):\n        return len(self._items)\n```\n:::\n\n\n:::\n\nRef: Beazley, David M. Python Distilled (p. 259). Pearson Education. Kindle Edition. \n\n## Avoiding Inheritance via Functions\n\n::: {.panel-tabset}\n#### Complex\n\n::: {#cf5512c4 .cell execution_count=3}\n``` {.python .cell-code}\nclass DataParser:\n    def parse(self, lines):\n        records = []\n        for line in lines:\n            row = line.split(',')\n            record = self.make_record(row)\n            records.append(row)\n        return records\n\n    def make_record(self, row):\n        raise NotImplementedError()\n\nclass PortfolioDataParser(DataParser):\n    def make_record(self, row):\n        return {\n           'name': row[0],\n           'shares': int(row[1]),\n           'price': float(row[2])\n        }\n```\n:::\n\n\n```python\nparser = PortfolioDataParser()\ndata = parser.parse(open('portfolio.csv'))\n```\n\n#### Simple\n\n::: {#c10a7a85 .cell execution_count=4}\n``` {.python .cell-code}\ndef parse_data(lines, make_record):\n    records = []\n    for line in lines:\n        row = line.split(',')\n        record = make_record(row)\n        records.append(row)\n    return records\n\ndef make_dict(row):\n    return {\n        'name': row[0],\n        'shares': int(row[1]),\n        'price': float(row[2])\n    }\n```\n:::\n\n\n```python\ndata = parse_data(open('portfolio.csv'), make_dict)\n```\n\n:::\n\n\n## Static Methods\n\nSometimes a class is merely used as a namespace for functions declared as static methods using `@staticmethod`. Unlike a normal method or class method, a static method does not take an extra self or cls argument. A static method is just a ordinary function that happens to be defined inside a class.\n\n### Simple\n\n::: {#833573dc .cell execution_count=5}\n``` {.python .cell-code}\nclass Ops:\n    @staticmethod\n    def add(x, y):\n        return x + y\n\n    @staticmethod\n    def sub(x, y):\n        return x - y\n```\n:::\n\n\n::: {#6f589357 .cell execution_count=6}\n``` {.python .cell-code}\na = Ops.add(2, 3)\nb = Ops.sub(4, 5)\n```\n:::\n\n\nRef: Beazley, David M. Python Distilled (p. 272). Pearson Education. Kindle Edition. \n\n### Advanced\n\n::: {#fa4e6575 .cell execution_count=7}\n``` {.python .cell-code}\nclass StandardPolicy:\n    @staticmethod\n    def deposit(account, amount):\n        account.balance += amount\n\n    @staticmethod\n    def withdraw(account, amount):\n        account.balance -= amount\n\n    @staticmethod\n    def inquiry(account):\n        return account.balance\n\nclass EvilPolicy(StandardPolicy):\n    @staticmethod\n    def deposit(account, amount):\n        account.balance += 0.95*amount\n\n    @staticmethod\n    def inquiry(account):\n        import random\n        if random.randint(0,4) == 1:\n           return 1.10 * account.balance\n        else:\n           return account.balance\n```\n:::\n\n\n::: {#1b951793 .cell execution_count=8}\n``` {.python .cell-code}\nclass Account:\n    def __init__(self, owner, balance, *, policy=StandardPolicy):\n        self.owner = owner\n        self.balance = balance\n        self.policy = policy\n\n    def __repr__(self):\n        return f'Account({self.policy}, {self.owner!r}, {self.balance!r})'\n\n    def deposit(self, amount):\n        self.policy.deposit(self, amount)\n\n    def withdraw(self, amount):\n        self.policy.withdraw(self, amount)\n\n    def inquiry(self):\n        return self.policy.inquiry(self)\n```\n:::\n\n\n::: {#8e60b7de .cell execution_count=9}\n``` {.python .cell-code}\na = Account('Guido', 1000.0)\na.policy \na.deposit(500)\na.inquiry()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n1500.0\n```\n:::\n:::\n\n\n::: {#b95132e5 .cell execution_count=10}\n``` {.python .cell-code}\nb = Account('Guido', 1000.0, policy=EvilPolicy)\nb.deposit(500)\nb.inquiry()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n1475.0\n```\n:::\n:::\n\n\n",
    "supporting": [
      "oop-trick_files"
    ],
    "filters": [],
    "includes": {}
  }
}
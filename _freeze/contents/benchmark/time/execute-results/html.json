{
  "hash": "ce62efbfc488fbc1c2a6b191f9aa0b69",
  "result": {
    "engine": "jupyter",
    "markdown": "# Time Module\n\n## Basic\n\n### What is the `time` module?\n\nThe `time` module gives you ways to work with time in your Python programs. This includes:\n- Getting the current time\n- Measuring elapsed time\n- Pausing your program's execution\n- Converting between different time formats\n\n\n1. `time.time()` gives you the current time as seconds since the epoch\n2. `time.sleep(seconds)` pauses your program for the specified duration\n3. `localtime()` and `gmtime()` convert epoch time to structured time objects\n4. `strftime()` formats time objects into human-readable strings\n5. `perf_counter()` is best for precise performance measurements\n6. `process_time()` measures only CPU time used by your program\n\n\nLet's explore each of these functions with examples.\n\n::: {#abf06dc4 .cell execution_count=1}\n``` {.python .cell-code}\nimport time\n```\n:::\n\n\n### Getting the current time\n\nThe most basic function is `time()`, which returns the current time as a floating-point number representing seconds since the \"epoch\" (January 1, 1970, 00:00:00 UTC):\n\n::: {#adcdfc1a .cell execution_count=2}\n``` {.python .cell-code}\ncurrent_time = time.time()\nprint(current_time)  # Example output: 1712020642.7743263\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1746977445.338582\n```\n:::\n:::\n\n\nThis number by itself isn't very readable, but it's useful for calculations and can be converted to more human-readable formats.\n\n### Measuring elapsed time\n\nA common use of the `time` module is measuring how long something takes:\n\n::: {#a1f0d2ec .cell execution_count=3}\n``` {.python .cell-code}\nstart_time = time.time()\n\n# Code you want to measure\nfor i in range(1_000_000):\n    pass\n\nend_time = time.time()\nelapsed_time = end_time - start_time\nprint(f\"Operation took {elapsed_time:.6f} seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOperation took 0.015958 seconds\n```\n:::\n:::\n\n\n## Pausing execution with sleep()\n\nTo pause your program for a specified number of seconds:\n\n::: {#b1c2798c .cell execution_count=4}\n``` {.python .cell-code}\nprint(\"Starting...\")\ntime.sleep(2)  # Pause for 2 seconds\nprint(\"Continuing after 2 seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nStarting...\nContinuing after 2 seconds\n```\n:::\n:::\n\n\nThis is useful for creating delays, implementing simple animations, or rate-limiting API calls.\n\n## Time conversions\n\n### Converting epoch time to a structured time\n\nThe `localtime()` and `gmtime()` functions convert a time expressed in seconds since the epoch to a structured time:\n\n::: {#850f6aa7 .cell execution_count=5}\n``` {.python .cell-code}\ncurrent_time = time.time()\nlocal_time = time.localtime(current_time)  # Local time\nutc_time = time.gmtime(current_time)       # UTC time\n\nprint(local_time)  \nprint(utc_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntime.struct_time(tm_year=2025, tm_mon=5, tm_mday=11, tm_hour=22, tm_min=30, tm_sec=47, tm_wday=6, tm_yday=131, tm_isdst=0)\ntime.struct_time(tm_year=2025, tm_mon=5, tm_mday=11, tm_hour=15, tm_min=30, tm_sec=47, tm_wday=6, tm_yday=131, tm_isdst=0)\n```\n:::\n:::\n\n\nThese functions return a `struct_time` object, which has named attributes like `tm_year`, `tm_mon`, etc.\n\n### Converting to human-readable format\n\nThe `strftime()` function formats time according to specified format codes:\n\n::: {#a9f4846b .cell execution_count=6}\n``` {.python .cell-code}\nlocal_time = time.localtime()\nformatted_time = time.strftime(\"%Y-%m-%d %H:%M:%S\", local_time)\nprint(formatted_time)  # Example output: 2025-04-02 10:30:42\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2025-05-11 22:30:47\n```\n:::\n:::\n\n\nCommon format codes:\n\n- `%Y`: 4-digit year (e.g., 2025)\n- `%m`: Month (01-12)\n- `%d`: Day (01-31)\n- `%H`: Hour in 24-hour format (00-23)\n- `%M`: Minute (00-59)\n- `%S`: Second (00-59)\n- `%A`: Weekday name (e.g., Wednesday)\n- `%B`: Month name (e.g., April)\n\n### Converting string to time\n\nThe `strptime()` function parses a string representation of time:\n\n```python\ntime_string = \"2025-04-02 10:30:42\"\nparsed_time = time.strptime(time_string, \"%Y-%m-%d %H:%M:%S\")\nprint(parsed_time)  # Returns a struct_time object\n```\n\n### Performance measurement with `perf_counter()`\n\nFor more precise timing, especially for benchmarking code, use `perf_counter()`:\n\n::: {#91ee77da .cell execution_count=7}\n``` {.python .cell-code}\nstart = time.perf_counter()\n# Code to measure\ntime.sleep(0.1)  # Just as an example\nend = time.perf_counter()\nprint(f\"Operation took {end - start:.6f} seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOperation took 0.105405 seconds\n```\n:::\n:::\n\n\n`perf_counter()` is more accurate than `time()` for measuring short durations and isn't affected by system clock changes.\n\n### Processor time with `process_time()`\n\nTo measure only CPU time used by your program (excluding sleep time):\n\n::: {#02c6588f .cell execution_count=8}\n``` {.python .cell-code}\nstart = time.process_time()\n# Code to measure\ntime.sleep(1)  # This won't be counted in process_time\nend = time.process_time()\nprint(f\"CPU time used: {end - start:.6f} seconds\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCPU time used: 0.001698 seconds\n```\n:::\n:::\n\n\n## Example\n\n### Countdown\n\n::: {#87f11550 .cell execution_count=9}\n``` {.python .cell-code}\ndef countdown(seconds):\n    \"\"\"\n    Count down from the specified number of seconds.\n    \n    Parameters\n    ----------\n    seconds : int\n        Number of seconds to count down from\n    \"\"\"\n    print(f\"Countdown starting from {seconds} seconds...\")\n    \n    for remaining in range(seconds, 0, -1):\n        print(f\"{remaining} seconds remaining\")\n        time.sleep(1)\n        \n    print(\"Time's up!\")\n\n# Usage\ncountdown(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCountdown starting from 5 seconds...\n5 seconds remaining\n4 seconds remaining\n3 seconds remaining\n2 seconds remaining\n1 seconds remaining\nTime's up!\n```\n:::\n:::\n\n\n",
    "supporting": [
      "time_files"
    ],
    "filters": [],
    "includes": {}
  }
}
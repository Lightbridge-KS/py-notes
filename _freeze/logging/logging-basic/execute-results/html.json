{
  "hash": "e236ec0a153205020ad3cca2f210fb1b",
  "result": {
    "engine": "jupyter",
    "markdown": "# Logging (Basic)\n\n::: {#2bc5d881 .cell execution_count=1}\n``` {.python .cell-code}\nimport logging\n```\n:::\n\n\n## Default Configuration\n\nDefault logging level is `WARNING`.\n\n::: {#fa22b1ec .cell execution_count=2}\n``` {.python .cell-code}\nlogging.debug(\"Small detail. Useful for troubleshooting.\")\nlogging.info(\"This is informative.\")\nlogging.warning(\"This is a warning message.\")\nlogging.error(\"Uh oh. Something went wrong.\")\nlogging.critical(\"We have a big problem!\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:root:This is a warning message.\nERROR:root:Uh oh. Something went wrong.\nCRITICAL:root:We have a big problem!\n```\n:::\n:::\n\n\n## Config with `basicConfig()`\n\n### Arguments\n\n**Arguments:**\n\n- `filename`: Write log messages to the given file, rather than stderr.\n\n- `filemode`: Set to \"a\" to append to the log file (the default), or \"w\" to overwrite.\n\n- `format`: Use a custom format string for the log messages.\n\n**Format:**\n\n\n| Attribute  | Format          | Description                                                                 |\n|------------|-----------------|-----------------------------------------------------------------------------|\n| asctime    | %(asctime)s     | Human-readable date/time                                                    |\n| funcName   | %(funcName)s    | Name of function containing the logging call                                |\n| lineno     | %(lineno)d      | The line number of the logging call                                         |\n| message    | %(message)s     | The log message                                                             |\n| pathname   | %(pathname)s    | Full pathname of the source file of the logging call                        |\n| levelname  | %(levelname)s   | Text logging level for the message (*DEBUG, INFO, WARNING, ERROR, CRITICAL*) |\n| name       | %(name)s        | The loggerâ€™s name                                                           |\n\n### Example: Change Log Level\n\nChange The Logging Level to `INFO`.\n\n::: {#19583b8e .cell execution_count=3}\n``` {.python .cell-code}\nlogging.basicConfig(level=logging.INFO)\n```\n:::\n\n\n::: {#6b405419 .cell execution_count=4}\n``` {.python .cell-code}\nlogging.debug(\"Small detail. Useful for troubleshooting.\")\nlogging.info(\"This is informative.\")\nlogging.warning(\"This is a warning message.\")\nlogging.error(\"Uh oh. Something went wrong.\")\nlogging.critical(\"We have a big problem!\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:root:This is a warning message.\nERROR:root:Uh oh. Something went wrong.\nCRITICAL:root:We have a big problem!\n```\n:::\n:::\n\n\n### Logging During Development\n\nHere is the reccomended configuration for development:\n\n::: {#193adf25 .cell execution_count=5}\n``` {.python .cell-code}\n# Wipes out previous log entries when program restarts\nlogging.basicConfig(filename=\"log.txt\", filemode=\"w\")\n```\n:::\n\n\n::: {#038bea4b .cell execution_count=6}\n``` {.python .cell-code}\nlogging.debug(\"Small detail. Useful for troubleshooting.\")\nlogging.info(\"This is informative.\")\nlogging.warning(\"This is a warning message.\")\nlogging.error(\"Uh oh. Something went wrong.\")\nlogging.critical(\"We have a big problem!\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:root:This is a warning message.\nERROR:root:Uh oh. Something went wrong.\nCRITICAL:root:We have a big problem!\n```\n:::\n:::\n\n\n## Passing Argument\n\nRecommend to pass arguments in the following way:\n\n```python\nlogging.info(format, *args)\n```\n\n::: {#bb0630e6 .cell execution_count=7}\n``` {.python .cell-code}\nlogging.basicConfig(level=logging.INFO)\n\nnum_fruits = 14\nfruit_name = \"oranges\"\n\nlogging.info(\n    \"We ate %d of your %s. Thanks!\",\n    num_fruits, fruit_name\n    )\n```\n:::\n\n\n",
    "supporting": [
      "logging-basic_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}
[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python Cheat Sheet",
    "section": "",
    "text": "About\n\n\n\nThis is my Python cheat sheet book\n\n\nI am an R user who is learning Python. I’m building my reference for Python. Also, It has some R code as well.\n\n\n\n\n\n\nWarning\n\n\n\nNote that this is a work in progress book, so the content is imperfect and subject to change.\n\n\n\nLast updated: 2022-03-30"
  },
  {
    "objectID": "basic/primitive.html",
    "href": "basic/primitive.html",
    "title": "1  Primitive Types",
    "section": "",
    "text": "1.0.1 Type Conversion\n\nint(2.8)\n## 2\nfloat(1)\n## 1.0\nstr(3)\n## '3'\nbool(0)\n## False\n\nThese considered “Falsy”\n\"\"\n0\nNone\n\nbool(0)\n## False\nbool(1)\n## True\nbool(\"\")\n## False\nbool(\"F\")\n## True\nbool(None)\n## False"
  },
  {
    "objectID": "basic/number.html",
    "href": "basic/number.html",
    "title": "2  Number",
    "section": "",
    "text": "2.0.2 Arithmatic Operators\n\n10 + 3\n## 13\n10 - 3\n## 7\n10 * 3\n## 30\n10 ** 3\n## 1000\n10 / 3 \n## 3.3333333333333335\n10 // 3 # floor division\n## 3\n10 % 3 # modulus\n## 1\n\n\n\n2.0.3 Augmented Assignment Operator\n\nx = 10\nx = x + 3\nx\n## 13\n\nShorter version\n\nx = 10\nx += 3\nx\n## 13\n\n\n\n2.0.4 Function with Numbers\n\nround(2.3)\n## 2\nabs(-2.3)\n## 2.3\n\nusing math module\n\nimport math\n\nmath.ceil(2.3)\n## 3\nmath.factorial(3)\n## 6"
  },
  {
    "objectID": "basic/string.html",
    "href": "basic/string.html",
    "title": "3  String",
    "section": "",
    "text": "course = \"Python programming\"\n\ntype(course)\n## <class 'str'>\nlen(course)\n## 18\n\nR\n\ncourse_r <- \"R programming\"\n\ntypeof(course_r)\n## [1] \"character\"\nlength(course_r)\n## [1] 1\nnchar(course_r)\n## [1] 13\n\n\n3.0.1 Slicing\nPython\n\ncourse[0]\n## 'P'\ncourse[-1]\n## 'g'\ncourse[0:3]\n## 'Pyt'\ncourse[:3]\n## 'Pyt'\ncourse[0:]\n## 'Python programming'\ncourse[:]\n## 'Python programming'\n\nR\n\nsubstr(course_r, 1, 1)\n## [1] \"R\"\nsubstr(course_r, 1, 4)\n## [1] \"R pr\"\n\n\n\n3.0.2 Escape\nPython\n\nprint(\"python \\\"programming\\\" \\nis 'fun'\")\n## python \"programming\" \n## is 'fun'\n\nR\n\ncat(\"R\\nis \\\"also\\\" 'fun'\")\n## R\n## is \"also\" 'fun'\n\n\n\n3.0.3 Join String\nPython\n\nfirst = \"Kittipos\"\nlast = \"Sirivongrungson\"\n# Simple\nfirst + \" \" + last\n# Advance\n## 'Kittipos Sirivongrungson'\nprint(f\"{first} {last} is {len(first + last)} letter long\")\n## Kittipos Sirivongrungson is 23 letter long\n\nR\n\nfirst <-  \"Kittipos\"\nlast <-  \"Sirivongrungson\"\n# Simple\npaste(first, last)\n## [1] \"Kittipos Sirivongrungson\"\n# Advance\nglue::glue(\"{first} {last} is {nchar(paste0(first, last))} letter long\")\n## Kittipos Sirivongrungson is 23 letter long\n\n\n\n3.0.4 String Methods\nPython\nCopy on modify\n\ncourse = \" Python programming \"\n\ncourse.upper() # Copy on modify\n## ' PYTHON PROGRAMMING '\ncourse # Original is intact\n## ' Python programming '\n\nBasic formatting\n\ncourse.upper()\n## ' PYTHON PROGRAMMING '\ncourse.lower()\n## ' python programming '\ncourse.title()\n## ' Python Programming '\n\nStrip white spaces\n\ncourse.strip()\n## 'Python programming'\ncourse.lstrip() # left\n## 'Python programming '\ncourse.rstrip() # right\n## ' Python programming'\n\nFind and replace character\n\ncourse = \" Python programming \"\n\ncourse.find(\"pro\")\n## 8\ncourse.replace(\"p\", \"j\")\n## ' Python jrogramming '\n\nLogical testing with string\n\n\"pro\" in course\n## True\n\"java\" not in course\n## True"
  },
  {
    "objectID": "basic/cond.html",
    "href": "basic/cond.html",
    "title": "4  Conditional",
    "section": "",
    "text": "temp = 15\n\nif temp > 30:\n  print(\"Too hot\")\nelif temp > 20:\n  print(\"It's about right\")\nelse:\n  print(\"It's cold\")\n  \n## It's cold\nprint(\"Bye!\")\n## Bye!\n\n\n\n\nThis is long\n\nscore = 4\n\nif score >= 5:\n  msg = \"pass\"\nelse:\n  msg = \"fail\"\n\nprint(msg)\n## fail\n\nuse Ternary Operator instead\nvalue_if_true if condition else value_if_false\n\nscore = 7\n\nmsg = \"pass\" if score >= 5 else \"fail\"\nmsg\n## 'pass'\n\n\n\n\nand or not they can be short-circuited.\n\nhigh_income = True\ngood_credit = False\nstudent = False\n\nif (high_income or good_credit) and not student:\n  print(\"eligible\")\nelse:\n  print(\"not eligible\")\n## eligible\n\n\n\n\n\nage = 23\n\nif 18 < age < 60:\n  print(\"eligible\")\n## eligible"
  },
  {
    "objectID": "basic/loop.html",
    "href": "basic/loop.html",
    "title": "5  Loop",
    "section": "",
    "text": "Common iterables that can be used in loop:\n\nrange\nstr: iterate through each characters\nlist\n\n\nfor i in \"python\":\n  print(i)\n## p\n## y\n## t\n## h\n## o\n## n\n\n\nfor i in [1, 2]:\n  print(i)\n## 1\n## 2\n\nrange() is very helpful\nrange(start, stop, step)\n\nstart is inclusion\nstop is exclusive\n\n\ntype(range(1))\n## <class 'range'>\nlist(range(2))\n## [0, 1]\nlist(range(1, 3))\n## [1, 2]\nlist(range(1, 10, 2))\n## [1, 3, 5, 7, 9]\n\n\nfor number in range(3):\n  print(number)\n## 0\n## 1\n## 2\n\n\nfor number in range(1, 4):\n  print(\"Attempt: \", number, number * \".\")\n## Attempt:  1 .\n## Attempt:  2 ..\n## Attempt:  3 ...\n\n\n\nThe break statement, breaks out of the innermost enclosing for or while loop\nelse is executed when the loop terminates through exhaustion of the iterable, but not when the loop is terminated by a break statement.\nFrom: Ref\n\nsuccessful = False\n\nfor number in range(1, 4):\n  print(\"Attempt: \", number)\n  if successful:\n      print(\"Success\")\n      break\nelse:\n  print(\"Attempt 3 times and failed\")\n## Attempt:  1\n## Attempt:  2\n## Attempt:  3\n## Attempt 3 times and failed\n\n\n\n\n\nfor x in range(3):\n  for y in range(2):\n    print(f\"({x},{y})\")\n## (0,0)\n## (0,1)\n## (1,0)\n## (1,1)\n## (2,0)\n## (2,1)\n\n\ncount = 0\n\nfor n in range(1, 10):\n  if (n % 2) == 0:\n    print(n)\n    count += 1\n    \n## 2\n## 4\n## 6\n## 8\nprint(f\"We have {count} even numbers\")\n## We have 4 even numbers\n\n\n10 % 2\n## 0\n10 % 3\n## 1"
  },
  {
    "objectID": "basic/loop.html#while-loop",
    "href": "basic/loop.html#while-loop",
    "title": "5  Loop",
    "section": "5.2 While Loop",
    "text": "5.2 While Loop\n\nnumber = 100\nwhile number > 0:\n  number //= 2\n  print(number)\n## 50\n## 25\n## 12\n## 6\n## 3\n## 1\n## 0"
  },
  {
    "objectID": "basic/function.html",
    "href": "basic/function.html",
    "title": "6  Functions",
    "section": "",
    "text": "def greet():\n  \"\"\"Greeeting\"\"\"\n  print(\"Hello World\")\n\n\ngreet()\n## Hello World"
  },
  {
    "objectID": "basic/function.html#arguments",
    "href": "basic/function.html#arguments",
    "title": "6  Functions",
    "section": "6.2 Arguments",
    "text": "6.2 Arguments\nTerminology: key = value\n\nParameters are like key\nArguments are like value that supply to the parameters\n\n\ndef greet(first, last):\n  \"\"\"Greeeting someone\"\"\"\n  print(f\"Hello {first} {last}\")\n  print(\"Welcome aboard!\")\n\nParameters = first, last\n\ngreet(\"Ada\", \"Lovelace\")\n## Hello Ada Lovelace\n## Welcome aboard!\n\nArguments = “Ada”, “Lovelace”"
  },
  {
    "objectID": "basic/function.html#return",
    "href": "basic/function.html#return",
    "title": "6  Functions",
    "section": "6.3 Return",
    "text": "6.3 Return\nreturn a value with return statement\n\ndef get_greet(name):\n  return f\"Hello {name}\"\n\n\nprint(get_greet(\"mom\"))\n## Hello mom\n\nBy default function return None, if not provide return value.\n\ndef myfun():\n  print(\"Hi\")\n\n\nprint(myfun())\n## Hi\n## None"
  }
]
# Logging (Basic)

```{python}
import logging
```

## Default Configuration

Default logging level is `WARNING`.

```{python}
logging.debug("Small detail. Useful for troubleshooting.")
logging.info("This is informative.")
logging.warning("This is a warning message.")
logging.error("Uh oh. Something went wrong.")
logging.critical("We have a big problem!")
```


## Config with `basicConfig()`

### Arguments

**Arguments:**

- `filename`: Write log messages to the given file, rather than stderr.

- `filemode`: Set to "a" to append to the log file (the default), or "w" to overwrite.

- `format`: Use a custom format string for the log messages.

**Format:**


| Attribute  | Format          | Description                                                                 |
|------------|-----------------|-----------------------------------------------------------------------------|
| asctime    | %(asctime)s     | Human-readable date/time                                                    |
| funcName   | %(funcName)s    | Name of function containing the logging call                                |
| lineno     | %(lineno)d      | The line number of the logging call                                         |
| message    | %(message)s     | The log message                                                             |
| pathname   | %(pathname)s    | Full pathname of the source file of the logging call                        |
| levelname  | %(levelname)s   | Text logging level for the message (*DEBUG, INFO, WARNING, ERROR, CRITICAL*) |
| name       | %(name)s        | The loggerâ€™s name                                                           |

### Example: Change Log Level

Change The Logging Level to `INFO`.

```{python}
logging.basicConfig(level=logging.INFO)
```

```{python}
logging.debug("Small detail. Useful for troubleshooting.")
logging.info("This is informative.")
logging.warning("This is a warning message.")
logging.error("Uh oh. Something went wrong.")
logging.critical("We have a big problem!")
```

### Logging During Development

Here is the reccomended configuration for development:

```{python}
# Wipes out previous log entries when program restarts
logging.basicConfig(filename="log.txt", filemode="w")
```

```{python}
logging.debug("Small detail. Useful for troubleshooting.")
logging.info("This is informative.")
logging.warning("This is a warning message.")
logging.error("Uh oh. Something went wrong.")
logging.critical("We have a big problem!")
```

## Passing Argument

Recommend to pass arguments in the following way:

```python
logging.info(format, *args)
```

```{python}
logging.basicConfig(level=logging.INFO)

num_fruits = 14
fruit_name = "oranges"

logging.info(
    "We ate %d of your %s. Thanks!",
    num_fruits, fruit_name
    )
```
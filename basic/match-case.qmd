# `match-case`

Implemented in Python 3.10

- [Motivation and rationale](https://peps.python.org/pep-0635/#match-semantics)

## Basic

### Simple

```{python}
def http_error(status):
    match status:
        case 400:
            return "Bad request"
        case 404:
            return "Not found"
        case 418:
            return "I'm a teapot"
        case _:
            return "Something's wrong with the internet"
```


```{python}
http_error(400)
http_error(418)
http_error(0)
```

### Combined


```{python}
def http_error2(status):
    match status:
        case 400:
            return "Bad request"
        case 401 | 403 | 404: #  combine 
            return "Not allowed"
        case _:
            return "Something's wrong with the internet"
```

```{python}
http_error2(401)
http_error2(403)
```

```{python}
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

def where_is(point):
    match point:
        case Point(x=0, y=0):
            print("Origin")
        case Point(x=0, y=y):
            print(f"Y={y}")
        case Point(x=x, y=0):
            print(f"X={x}")
        case Point():
            print("Somewhere else")
        case _:
            print("Not a point")
```

```{python}
p0 = Point(0, 0)
where_is(p0)
```

```{python}
p1 = Point(1, 1)
where_is(p1)
```

### Match By length

```{python}
today_responses = [200, 300, 404, 500]
match today_responses:
    case [a]:
            print(f"One response today: {a}")
    case [a, b]:
            print(f"Two responses today: {a} and {b}")
    case [a, b, *rest]:
            print(f"All responses: {a}, {b}, {rest}")
```

### Using `__match_args__`

```{python}
class Point:
    __match_args__ = ('x', 'y')
    def __init__(self, x, y):
        self.x = x
        self.y = y

# Suppose you have an instance of Point
point = Point(1, 2)
```

You can use pattern matching to destructure the point:

```{python}
match point:
    case Point(x, y):
        print(f"The point is at ({x}, {y}).")
```

Is equivalent to:

```{python}
if isinstance(point, Point):
  print(f"The point is at ({point.x}, {point.y}).")
```

In this example, the match statement checks if point is an instance of Point and then automatically unpacks its x and y attributes according to the order specified in `__match_args__`.

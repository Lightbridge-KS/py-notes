---
title: "Loop"
---

```{r setup, include=FALSE}
here::i_am("basic/loop.qmd")
options(reticulate.repl.quiet = TRUE) # To quiet python interpreter
knitr::opts_chunk$set(collapse = TRUE)
library(reticulate)
library(here)
```

## For Loop

Common iterables that can be used in loop:

-   `range`
-   `str`: iterate through each characters
-   `list`

```{python}
for i in "python":
  print(i)
```

```{python}
for i in [1, 2]:
  print(i)
```

`range()` is very helpful

``` python
range(start, stop, step)
```

-   `start` is inclusion
-   `stop` is exclusive

```{python}
type(range(1))

list(range(2))
list(range(1, 3))
list(range(1, 10, 2))
```

```{python}
for number in range(3):
  print(number)
```

```{python}
for number in range(1, 4):
  print("Attempt: ", number, number * ".")
```

### For else

The `break` statement, breaks out of the innermost enclosing `for` or `while` loop

`else` is executed when the loop terminates through exhaustion of the iterable, but not when the loop is terminated by a break statement.

From: [Ref](https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops)

```{python}
successful = False

for number in range(1, 4):
  print("Attempt: ", number)
  if successful:
      print("Success")
      break
else:
  print("Attempt 3 times and failed")
```

### Nested Loop

```{python}
for x in range(3):
  for y in range(2):
    print(f"({x},{y})")
```


```{python}
count = 0

for n in range(1, 10):
  if (n % 2) == 0:
    print(n)
    count += 1
    
print(f"We have {count} even numbers")
```

```{python}
10 % 2
10 % 3
```


## While Loop

```{python}
number = 100
while number > 0:
  number //= 2
  print(number)
```


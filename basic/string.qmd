---
title: "String"
format: html
---

```{r setup, include=FALSE}
library(here)
here::i_am("basic/string.qmd")
source(here("_common.R"))
```

`Python`

```{python}
course = "Python programming"

type(course)
len(course)
```

`R`

```{r}
course_r <- "R programming"

typeof(course_r)
length(course_r)
nchar(course_r)
```

### Slicing

`Python`

```{python}
course[0]
course[-1]
course[0:3]
course[:3]
course[0:]
course[:]
```

`R`


```{r}
substr(course_r, 1, 1)
substr(course_r, 1, 4)
```




### Escape

`Python`

```{python}
print("python \"programming\" \nis 'fun'")
```

`R`

```{r}
cat("R\nis \"also\" 'fun'")
```


### Join String

`Python`

```{python}
first = "Kittipos"
last = "Sirivongrungson"
# Simple
first + " " + last
# Advance
print(f"{first} {last} is {len(first + last)} letter long")
```

`R`


```{r}
first <-  "Kittipos"
last <-  "Sirivongrungson"
# Simple
paste(first, last)
# Advance
glue::glue("{first} {last} is {nchar(paste0(first, last))} letter long")
```





### String Methods

`Python`

Copy on modify 

```{python}
course = " Python programming "

course.upper() # Copy on modify
course # Original is intact
```

Basic formatting


```{python}
course.upper()
course.lower()
course.title()
```


Strip white spaces

```{python}
course.strip()
course.lstrip() # left
course.rstrip() # right
```

Find and replace character

```{python}
course = " Python programming "

course.find("pro")
course.replace("p", "j")
```

Logical testing with string
 
```{python}
"pro" in course
"java" not in course
```

### Format String

[Literal string interpolation](https://peps.python.org/pep-0498/)

Group 3 digits with `,`

```{python}
x = 1000000
f"{x:,}"
```

round digits

```{python}
x = 2/3
f"{x:.2f}"
```


# Exception 

```{r}
#| include: false
library(here)
here::i_am("basic/exception.qmd")
source(here("_common.R"))
```


## Try and Except


```{python}
def get_int(x):
    try:
        return int(x)
    except ValueError:
        print(f"'{x}' is not a number")

```

```{python}
get_int(5)
get_int(-1)
get_int(5.6)
get_int("cat")
```

```{python}
def attempt_float(x):
    try:
        return float(x)
    except ValueError:
        return x
```

```{python}
attempt_float("2")
attempt_float("X")
```



using `pass` to return `NoneType` and not print anything

```{python}
def get_int2(x):
    try:
        return int(x)
    except ValueError:
        pass

```


```{python}
get_int2(2)
get_int2("Cat") # Nothing

type(get_int2("Cat"))
```



`isnumeric()` to check whether string is all numeric. But, it's not very effective:


```{python}
"123".isnumeric() # Only case that works
"12.3".isnumeric()
"-1".isnumeric()
"cat".isnumeric()
```


## Always close File 

```python
f = open(path, mode="w")

try:
    write_to_file(f)
except:
    print("Failed")
else:
    print("Succeeded")
finally:
    f.close()
```


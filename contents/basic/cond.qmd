---
title: "Conditional"
---

<!-- ```{r setup, include=FALSE}
library(here)
here::i_am("basic/cond.qmd")
source(here("_common.R"))
``` -->

## IF statement

#### `if` `elif` `else` Structure

```{python}
temp = 15

if temp > 30:
  print("Too hot")
elif temp > 20:
  print("It's about right")
else:
  print("It's cold")
  
print("Bye!")
```

#### Ternary Operator

This is long

```{python}
score = 4

if score >= 5:
  msg = "pass"
else:
  msg = "fail"

print(msg)
```


use **Ternary Operator** instead

```python
value_if_true if condition else value_if_false
```


```{python}
score = 7

msg = "pass" if score >= 5 else "fail"
msg
```

#### Logical Operators

`and` `or` `not` they can be short-circuited.

```{python}
high_income = True
good_credit = False
student = False

if (high_income or good_credit) and not student:
  print("eligible")
else:
  print("not eligible")
```

#### Chaining Comparison Operators


```{python}
age = 23

if 18 < age < 60:
  print("eligible")
```



## Execute based on argument type

```{python}
def handle_float(x: float) -> None:
    print("x is float")

def handle_list(x: list) -> None:
    print("x is list")

def num_or_list(x: float | list) -> None:
    type_handler = {
        float: handle_float,
        list: handle_list,
    }
    handler = type_handler.get(type(x))
    if handler:
        handler(x)
    else:
        print("Unsupported type")

```


```{python}
num_or_list(2.1)
```


```{python}
num_or_list(["x", "y"])
```